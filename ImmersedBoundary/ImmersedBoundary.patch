Index: CMakeLists.txt
===================================================================
--- CMakeLists.txt	(revision 26559)
+++ CMakeLists.txt	(working copy)
@@ -217,7 +217,7 @@
 else()
 	set( Boost_USE_STATIC_LIBS ON) 
 endif()
-find_package(Boost COMPONENTS filesystem system serialization REQUIRED)
+find_package(Boost COMPONENTS filesystem system serialization program_options REQUIRED)
 list(APPEND Chaste_INCLUDES "${Boost_INCLUDE_DIR}")
 list(APPEND Chaste_LINK_LIBRARIES "${Boost_LIBRARIES}")
 
Index: cell_based/src/simulation/OffLatticeSimulation.cpp
===================================================================
--- cell_based/src/simulation/OffLatticeSimulation.cpp	(revision 26559)
+++ cell_based/src/simulation/OffLatticeSimulation.cpp	(working copy)
@@ -77,7 +77,7 @@
         // All classes derived from AbstractOffLatticeCellPopulation are covered by the above (except user-derived classes),
         // i.e. if you want to use this method with your own subclass of AbstractOffLatticeCellPopulation, then simply
         // comment out the line below
-        NEVER_REACHED;
+//        NEVER_REACHED;
     }
 }
 
Index: global/src/ExecutableSupport.cpp
===================================================================
--- global/src/ExecutableSupport.cpp	(revision 26559)
+++ global/src/ExecutableSupport.cpp	(working copy)
@@ -411,7 +411,7 @@
 void ExecutableSupport::StandardStartup(int* pArgc, char*** pArgv)
 {
     InitializePetsc(pArgc, pArgv);
-    ShowCopyright();
+//    ShowCopyright();
     ShowParallelLaunching();
 }
 
Index: mesh/src/utilities/ObsoleteBoxCollection.cpp
===================================================================
--- mesh/src/utilities/ObsoleteBoxCollection.cpp	(revision 26559)
+++ mesh/src/utilities/ObsoleteBoxCollection.cpp	(working copy)
@@ -642,7 +642,7 @@
     // Create an empty set of neighbours for each node, and add each node to its correct box
     for (unsigned node_index = 0; node_index < rNodes.size(); node_index++)
     {
-        rNodes[node_index]->ClearNeighbours();
+//        rNodes[node_index]->ClearNeighbours();
 
         unsigned box_index = CalculateContainingBox(rNodes[node_index]);
         mBoxes[box_index].AddNode(rNodes[node_index]);
@@ -651,7 +651,7 @@
     for (unsigned i = 0; i < rNodes.size(); i++)
     {
         Node<DIM>* this_node = rNodes[i];
-        unsigned node_index = this_node->GetIndex();
+//        unsigned node_index = this_node->GetIndex();
 
         // Get the box containing this node
         unsigned this_node_box_index = CalculateContainingBox(this_node);
@@ -679,24 +679,24 @@
                     if (other_node_index > this_node->GetIndex())
                     {
                         rNodePairs.push_back(std::pair<Node<DIM>*, Node<DIM>*>(this_node, (*node_iter)));
-                        this_node->AddNeighbour(other_node_index);
-                        (*node_iter)->AddNeighbour(node_index);
+//                        this_node->AddNeighbour(other_node_index);
+//                        (*node_iter)->AddNeighbour(node_index);
                     }
                 }
                 else
                 {
                     rNodePairs.push_back(std::pair<Node<DIM>*, Node<DIM>*>(this_node, (*node_iter)));
-                    this_node->AddNeighbour(other_node_index);
-                    (*node_iter)->AddNeighbour(node_index);
+//                    this_node->AddNeighbour(other_node_index);
+//                    (*node_iter)->AddNeighbour(node_index);
                 }
             }
         }
     }
 
-    for (unsigned i = 0; i < rNodes.size(); i++)
-    {
-        rNodes[i]->RemoveDuplicateNeighbours();
-    }
+//    for (unsigned i = 0; i < rNodes.size(); i++)
+//    {
+//        rNodes[i]->RemoveDuplicateNeighbours();
+//    }
 }
 
 /////////////////////////////////////////////////////////////////////////////
