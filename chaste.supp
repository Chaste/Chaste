#  To run a regular memory test
# 1. Configure a cmake
# $  cmake -DCMAKE_BUILD_TYPE=Debug -DChaste_MEMORY_TESTING_CPUS=6 ..
# (or similar)
# 2. Run all tests through Valgrind
# $  cmake --build . --target memtest
# (which effectively uses cmake --build . --target memtest --parallel 6 because of the CPUS etting)
# This takes about 2 hours.  All tests should pass, but a memory report will be given at the end

# To run a single test and generate missing suppressions:
mpiexec -np 1 valgrind --leak-check=full --suppressions=../chaste.supp --suppressions=../chaste-legacy.supp --gen-suppressions=all ./heart/test/Test1dMonodomainShannonCvodeBenchmarks



# PETSc/OpenMPI
###############
# OpenMPI https://github.com/cpmech/test-openmpi-valgrind
{
   PETSc/OpenMPI "Hello world" leak
   Memcheck:Leak
   match-leak-kinds: definite
   fun:calloc
   ...
   fun:orte_init
}
{
   PETSc/OpenMPI "Hello world" leak
   Memcheck:Leak
   match-leak-kinds: definite
   fun:malloc
   ...
   fun:_dl_catch_error
}
{
   PETSc/OpenMPI "Hello world" leak
   Memcheck:Leak
   match-leak-kinds: definite
   fun:malloc
   ...
   fun:ompi_mpi_finalize
}
{
   PETSc/OpenMPI "Hello world" leak
   Memcheck:Leak
   match-leak-kinds: definite
   fun:malloc
   ...
   fun:orte_init
}
# HDF5
######
{
   H5F: HDF5 write on closure
   Memcheck:Param
   pwrite64(buf)
   ...
   fun:H5Fclose
}
{
   PetscFinalize/OpenMPI "Hello world" leak
   Memcheck:Leak
   match-leak-kinds: definite
   fun:malloc
   ...
   fun:PetscFinalize
}
{
   PetscInitialize/OpenMPI "Hello world" leak
   Memcheck:Leak
   match-leak-kinds: definite
   ...
   fun:PetscInitialize
}
{
   PetscInitialize    <insert_a_suppression_name_here>
   Memcheck:Leak
   match-leak-kinds: possible
   fun:calloc
   ...
   fun:PetscInitialize
}
{
   PetscInitialize/OpenMPI "Hello world" leak
   Memcheck:Leak
   match-leak-kinds: definite
   fun:calloc
   ...
   fun:PetscInitialize
}
{
   PetscInitialize    mpi_init (malloc)
   Memcheck:Leak
   match-leak-kinds: possible
   fun:malloc
   ...
   fun:PetscInitialize
}
{
   PetscInitialize/OpenMPI "Hello world" leak
   Memcheck:Leak
   match-leak-kinds: definite
   fun:malloc
   ...
   fun:PetscInitialize
}
{
   PetscInitialize    <insert_a_suppression_name_here>
   Memcheck:Leak
   match-leak-kinds: possible
   fun:realloc
   ...
   fun:PetscInitialize
}
{
   PetscInitialize/OpenMPI "Hello world" leak
   Memcheck:Param
   setsockopt(optlen)
   ...
   fun:PetscInitialize
}
{
   PetscInitialize/OpenMPI "Hello world" leak
   Memcheck:Param
   socketcall.getsockopt(optlen)
   ...
   fun:PetscInitialize
}
{
   PetscInitialize/OpenMPI "Hello world" leak
   Memcheck:Param
   socketcall.getsockopt(optlen_out)
   ...
   fun:PetscInitialize
}
# Tetgen
########
{
   tetgen    Memory problem in Tetgen with quadratic meshes
   Memcheck:Cond
   fun:_ZN6tetgen10tetgenmesh13pointtraverseEv
   ...
   fun:main
}
