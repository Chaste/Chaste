#include "OpenSimplex2S.hpp"

OpenSimplex2S::Grad2 OpenSimplex2S::GRADIENTS_2D[OpenSimplex2S::PSIZE] {};
OpenSimplex2S::Grad3 OpenSimplex2S::GRADIENTS_3D[OpenSimplex2S::PSIZE] {};
OpenSimplex2S::Grad4 OpenSimplex2S::GRADIENTS_4D[OpenSimplex2S::PSIZE] {};

OpenSimplex2S::LatticePoint2D OpenSimplex2S::LOOKUP_2D[8 * 4] {};
OpenSimplex2S::LatticePoint3D OpenSimplex2S::LOOKUP_3D[8] {};
OpenSimplex2S::LatticePoint4D OpenSimplex2S::LOOKUP_4D[256][20] {};
unsigned char OpenSimplex2S::LOOKUP_4D_SIZE[256] {};

OpenSimplex2S::Initializer::Initializer()
{
  OpenSimplex2S::initLatticePoints();
  OpenSimplex2S::initGradients();
}

OpenSimplex2S::Initializer OpenSimplex2S::initializer {};

OpenSimplex2S::OpenSimplex2S(long seed)
{
  short source[PSIZE] {};
  for (short i = 0; i < PSIZE; i++) {
    source[i] = i;
  }
  for (int i = PSIZE - 1; i >= 0; i--) {
    seed = seed * 6364136223846793005L + 1442695040888963407L;
    int r = static_cast<int>((seed + 31) % (i + 1));
    if (r < 0) {
      r += (i + 1);
    }
    perm[i] = source[r];
    permGrad2[i] = GRADIENTS_2D[perm[i]];
    permGrad3[i] = GRADIENTS_3D[perm[i]];
    permGrad4[i] = GRADIENTS_4D[perm[i]];
    source[r] = source[i];
  }
}

/**
 * 2D SuperSimplex noise, standard lattice orientation.
 */
double OpenSimplex2S::noise2(double x, double y)
{
  // Get points for A2* lattice
  double s = 0.366025403784439 * (x + y);
  double xs = x + s;
  double ys = y + s;

  return noise2_Base(xs, ys);
}

/**
 * 2D SuperSimplex noise, with Y pointing down the main diagonal.
 * Might be better for a 2D sandbox style game, where Y is vertical.
 * Probably slightly less optimal for heightmaps or continent maps.
 */
double OpenSimplex2S::noise2_XBeforeY(double x, double y)
{
  // Skew transform and rotation baked into one.
  double xx = x * 0.7071067811865476;
  double yy = y * 1.224744871380249;

  return noise2_Base(yy + xx, yy - xx);
}

/**
 * 2D SuperSimplex noise base.
 * Lookup table implementation inspired by DigitalShadow.
 */
double OpenSimplex2S::noise2_Base(double xs, double ys)
{
  double value = 0;

  // Get base points and offsets
  int xsb = fastFloor(xs);
  int ysb = fastFloor(ys);
  double xsi = xs - xsb;
  double ysi = ys - ysb;

  // Index to point list
  int a = static_cast<int>(xsi + ysi);
  int index = (a << 2) | static_cast<int>(xsi - ysi / 2 + 1 - a / 2.0) << 3
            | static_cast<int>(ysi - xsi / 2 + 1 - a / 2.0) << 4;

  double ssi = (xsi + ysi) * -0.211324865405187;
  double xi = xsi + ssi;
  double yi = ysi + ssi;

  // Point contributions
  for (int i = 0; i < 4; i++) {
    LatticePoint2D c = LOOKUP_2D[index + i];

    double dx = xi + c.dx;
    double dy = yi + c.dy;
    double attn = 2.0 / 3.0 - dx * dx - dy * dy;
    if (attn <= 0) {
      continue;
    }

    int pxm = (xsb + c.xsv) & PMASK;
    int pym = (ysb + c.ysv) & PMASK;
    Grad2 grad = permGrad2[perm[pxm] ^ pym];
    double extrapolation = grad.dx * dx + grad.dy * dy;

    attn *= attn;
    value += attn * attn * extrapolation;
  }

  return value;
}

/**
 * 3D Re-oriented 8-point BCC noise, classic orientation
 * Proper substitute for what 3D SuperSimplex would be,
 * in light of Forbidden Formulae.
 * Use noise3_XYBeforeZ or noise3_XZBeforeY instead, wherever appropriate.
 */
double OpenSimplex2S::noise3_Classic(double x, double y, double z)
{
  // Re-orient the cubic lattices via rotation, to produce the expected look on cardinal planar
  // slices. If texturing objects that don't tend to have cardinal plane faces, you could even
  // remove this. Orthonormal rotation. Not a skew transform.
  double r = (2.0 / 3.0) * (x + y + z);
  double xr = r - x;
  double yr = r - y;
  double zr = r - z;

  // Evaluate both lattices to form a BCC lattice.
  return noise3_BCC(xr, yr, zr);
}

/**
 * 3D Re-oriented 8-point BCC noise, with better visual isotropy in (X, Y).
 * Recommended for 3D terrain and time-varied animations.
 * The Z coordinate should always be the "different" coordinate in your use case.
 * If Y is vertical in world coordinates, call noise3_XYBeforeZ(x, z, Y) or use noise3_XZBeforeY.
 * If Z is vertical in world coordinates, call noise3_XYBeforeZ(x, y, Z).
 * For a time varied animation, call noise3_XYBeforeZ(x, y, T).
 */
double OpenSimplex2S::noise3_XYBeforeZ(double x, double y, double z)
{
  // Re-orient the cubic lattices without skewing, to make X and Y triangular like 2D.
  // Orthonormal rotation. Not a skew transform.
  double xy = x + y;
  double s2 = xy * -0.211324865405187;
  double zz = z * 0.577350269189626;
  double xr = x + s2 - zz;
  double yr = y + s2 - zz;
  double zr = xy * 0.577350269189626 + zz;

  // Evaluate both lattices to form a BCC lattice.
  return noise3_BCC(xr, yr, zr);
}

/**
 * 3D Re-oriented 8-point BCC noise, with better visual isotropy in (X, Z).
 * Recommended for 3D terrain and time-varied animations.
 * The Y coordinate should always be the "different" coordinate in your use case.
 * If Y is vertical in world coordinates, call noise3_XZBeforeY(x, Y, z).
 * If Z is vertical in world coordinates, call noise3_XZBeforeY(x, Z, y) or use noise3_XYBeforeZ.
 * For a time varied animation, call noise3_XZBeforeY(x, T, y) or use noise3_XYBeforeZ.
 */
double OpenSimplex2S::noise3_XZBeforeY(double x, double y, double z)
{
  // Re-orient the cubic lattices without skewing, to make X and Z triangular like 2D.
  // Orthonormal rotation. Not a skew transform.
  double xz = x + z;
  double s2 = xz * -0.211324865405187;
  double yy = y * 0.577350269189626;
  double xr = x + s2 - yy;
  double zr = z + s2 - yy;
  double yr = xz * 0.577350269189626 + yy;

  // Evaluate both lattices to form a BCC lattice.
  return noise3_BCC(xr, yr, zr);
}

/**
 * Generate overlapping cubic lattices for 3D Re-oriented BCC noise.
 * Lookup table implementation inspired by DigitalShadow.
 * It was actually faster to narrow down the points in the loop itself,
 * than to build up the index with enough info to isolate 8 points.
 */
double OpenSimplex2S::noise3_BCC(double xr, double yr, double zr)
{
  // Get base and offsets inside cube of first lattice.
  int xrb = fastFloor(xr);
  int yrb = fastFloor(yr);
  int zrb = fastFloor(zr);
  double xri = xr - xrb;
  double yri = yr - yrb;
  double zri = zr - zrb;

  // Identify which octant of the cube we're in. This determines which cell
  // in the other cubic lattice we're in, and also narrows down one point on each.
  int xht = static_cast<int>(xri + 0.5);
  int yht = static_cast<int>(yri + 0.5);
  int zht = static_cast<int>(zri + 0.5);
  int index = (xht << 0) | (yht << 1) | (zht << 2);

  // Point contributions
  double value = 0;
  LatticePoint3D* c = &LOOKUP_3D[index];
  while (c != nullptr) {
    double dxr = xri + c->dxr;
    double dyr = yri + c->dyr;
    double dzr = zri + c->dzr;
    double attn = 0.75 - dxr * dxr - dyr * dyr - dzr * dzr;
    if (attn < 0) {
      c = c->nextOnFailure;
    } else {
      int pxm = (xrb + c->xrv) & PMASK;
      int pym = (yrb + c->yrv) & PMASK;
      int pzm = (zrb + c->zrv) & PMASK;
      Grad3 grad = permGrad3[perm[perm[pxm] ^ pym] ^ pzm];
      double extrapolation = grad.dx * dxr + grad.dy * dyr + grad.dz * dzr;

      attn *= attn;
      value += attn * attn * extrapolation;
      c = c->nextOnSuccess;
    }
  }
  return value;
}

/**
 * 4D SuperSimplex noise, classic lattice orientation.
 */
double OpenSimplex2S::noise4_Classic(double x, double y, double z, double w)
{
  // Get points for A4 lattice
  double s = 0.309016994374947 * (x + y + z + w);
  double xs = x + s;
  double ys = y + s;
  double zs = z + s;
  double ws = w + s;

  return noise4_Base(xs, ys, zs, ws);
}

/**
 * 4D SuperSimplex noise, with XY and ZW forming orthogonal triangular-based planes.
 * Recommended for 3D terrain, where X and Y (or Z and W) are horizontal.
 * Recommended for noise(x, y, sin(time), cos(time)) trick.
 */
double OpenSimplex2S::noise4_XYBeforeZW(double x, double y, double z, double w)
{
  double s2 = (x + y) * -0.28522513987434876941 + (z + w) * 0.83897065470611435718;
  double t2 = (z + w) * 0.21939749883706435719 + (x + y) * -0.48214856493302476942;
  double xs = x + s2;
  double ys = y + s2;
  double zs = z + t2;
  double ws = w + t2;

  return noise4_Base(xs, ys, zs, ws);
}

/**
 * 4D SuperSimplex noise, with XZ and YW forming orthogonal triangular-based planes.
 * Recommended for 3D terrain, where X and Z (or Y and W) are horizontal.
 */
double OpenSimplex2S::noise4_XZBeforeYW(double x, double y, double z, double w)
{
  double s2 = (x + z) * -0.28522513987434876941 + (y + w) * 0.83897065470611435718;
  double t2 = (y + w) * 0.21939749883706435719 + (x + z) * -0.48214856493302476942;
  double xs = x + s2;
  double ys = y + t2;
  double zs = z + s2;
  double ws = w + t2;

  return noise4_Base(xs, ys, zs, ws);
}

/**
 * 4D SuperSimplex noise, with XYZ oriented like noise3_Classic,
 * and W for an extra degree of freedom.
 * Recommended for time-varied animations which texture a 3D object (W=time)
 */
double OpenSimplex2S::noise4_XYZBeforeW(double x, double y, double z, double w)
{
  double xyz = x + y + z;
  double ww = w * 1.118033988749894;
  double s2 = xyz * -0.16666666666666666 + ww;
  double xs = x + s2;
  double ys = y + s2;
  double zs = z + s2;
  double ws = -0.5 * xyz + ww;

  return noise4_Base(xs, ys, zs, ws);
}

/**
 * 4D SuperSimplex noise base.
 * Using ultra-simple 4x4x4x4 lookup partitioning.
 * This isn't as elegant or SIMD/GPU/etc. portable as other approaches,
 * but it does compete performance-wise with optimized OpenSimplex1.
 */
double OpenSimplex2S::noise4_Base(double xs, double ys, double zs, double ws)
{
  double value = 0;

  // Get base points and offsets
  int xsb = fastFloor(xs);
  int ysb = fastFloor(ys);
  int zsb = fastFloor(zs);
  int wsb = fastFloor(ws);
  double xsi = xs - xsb;
  double ysi = ys - ysb;
  double zsi = zs - zsb;
  double wsi = ws - wsb;

  // Unskewed offsets
  double ssi = (xsi + ysi + zsi + wsi) * -0.138196601125011;
  double xi = xsi + ssi;
  double yi = ysi + ssi;
  double zi = zsi + ssi;
  double wi = wsi + ssi;

  int index = ((fastFloor(xs * 4) & 3) << 0) | ((fastFloor(ys * 4) & 3) << 2)
            | ((fastFloor(zs * 4) & 3) << 4) | ((fastFloor(ws * 4) & 3) << 6);

  // Point contributions
  for (int i = 0; i < LOOKUP_4D_SIZE[index]; ++i) {
    auto& c = LOOKUP_4D[index][i];
    double dx = xi + c.dx;
    double dy = yi + c.dy;
    double dz = zi + c.dz;
    double dw = wi + c.dw;
    double attn = 0.8 - dx * dx - dy * dy - dz * dz - dw * dw;
    if (attn > 0) {
      attn *= attn;

      int pxm = (xsb + c.xsv) & PMASK;
      int pym = (ysb + c.ysv) & PMASK;
      int pzm = (zsb + c.zsv) & PMASK;
      int pwm = (wsb + c.wsv) & PMASK;
      Grad4 grad = permGrad4[perm[perm[perm[pxm] ^ pym] ^ pzm] ^ pwm];
      double extrapolation = grad.dx * dx + grad.dy * dy + grad.dz * dz + grad.dw * dw;

      value += attn * attn * extrapolation;
    }
  }
  return value;
}

int OpenSimplex2S::fastFloor(double x)
{
  int xi = static_cast<int>(x);
  return x < xi ? xi - 1 : xi;
}

OpenSimplex2S::LatticePoint2D::LatticePoint2D(int a_xsv, int a_ysv)
{
  xsv = a_xsv;
  ysv = a_ysv;
  double ssv = (a_xsv + a_ysv) * -0.211324865405187;
  dx = -a_xsv - ssv;
  dy = -a_ysv - ssv;
}

OpenSimplex2S::LatticePoint2D::LatticePoint2D() = default;

OpenSimplex2S::LatticePoint3D::LatticePoint3D(int a_xrv, int a_yrv, int a_zrv, int lattice)
{
  dxr = -a_xrv + lattice * 0.5;
  dyr = -a_yrv + lattice * 0.5;
  dzr = -a_zrv + lattice * 0.5;
  xrv = a_xrv + lattice * 1024;
  yrv = a_yrv + lattice * 1024;
  zrv = a_zrv + lattice * 1024;
}

OpenSimplex2S::LatticePoint3D::LatticePoint3D() = default;

OpenSimplex2S::LatticePoint4D::LatticePoint4D(int a_xsv, int a_ysv, int a_zsv, int a_wsv)
{
  xsv = a_xsv;
  ysv = a_ysv;
  zsv = a_zsv;
  wsv = a_wsv;
  double ssv = (a_xsv + a_ysv + a_zsv + a_wsv) * -0.138196601125011;
  dx = -a_xsv - ssv;
  dy = -a_ysv - ssv;
  dz = -a_zsv - ssv;
  dw = -a_wsv - ssv;
}

OpenSimplex2S::LatticePoint4D::LatticePoint4D() = default;

void OpenSimplex2S::initLatticePoints()
{
  for (int i = 0; i < 8; i++) {
    int i1, j1, i2, j2;
    if ((i & 1) == 0) {
      if ((i & 2) == 0) {
        i1 = -1;
        j1 = 0;
      } else {
        i1 = 1;
        j1 = 0;
      }
      if ((i & 4) == 0) {
        i2 = 0;
        j2 = -1;
      } else {
        i2 = 0;
        j2 = 1;
      }
    } else {
      if ((i & 2) != 0) {
        i1 = 2;
        j1 = 1;
      } else {
        i1 = 0;
        j1 = 1;
      }
      if ((i & 4) != 0) {
        i2 = 1;
        j2 = 2;
      } else {
        i2 = 1;
        j2 = 0;
      }
    }
    LOOKUP_2D[i * 4 + 0] = { 0, 0 };
    LOOKUP_2D[i * 4 + 1] = { 1, 1 };
    LOOKUP_2D[i * 4 + 2] = { i1, j1 };
    LOOKUP_2D[i * 4 + 3] = { i2, j2 };
  }

  for (int i = 0; i < 8; i++) {
    int i1, j1, k1, i2, j2, k2;
    i1 = (i >> 0) & 1;
    j1 = (i >> 1) & 1;
    k1 = (i >> 2) & 1;
    i2 = i1 ^ 1;
    j2 = j1 ^ 1;
    k2 = k1 ^ 1;

    // The two points within this octant, one from each of the two cubic half-lattices.
    auto* c0 = new LatticePoint3D(i1, j1, k1, 0);
    auto* c1 = new LatticePoint3D(i1 + i2, j1 + j2, k1 + k2, 1);

    // (1, 0, 0) vs (0, 1, 1) away from octant.
    auto* c2 = new LatticePoint3D(i1 ^ 1, j1, k1, 0);
    auto* c3 = new LatticePoint3D(i1, j1 ^ 1, k1 ^ 1, 0);

    // (1, 0, 0) vs (0, 1, 1) away from octant, on second half-lattice.
    auto* c4 = new LatticePoint3D(i1 + (i2 ^ 1), j1 + j2, k1 + k2, 1);
    auto* c5 = new LatticePoint3D(i1 + i2, j1 + (j2 ^ 1), k1 + (k2 ^ 1), 1);

    // (0, 1, 0) vs (1, 0, 1) away from octant.
    auto* c6 = new LatticePoint3D(i1, j1 ^ 1, k1, 0);
    auto* c7 = new LatticePoint3D(i1 ^ 1, j1, k1 ^ 1, 0);

    // (0, 1, 0) vs (1, 0, 1) away from octant, on second half-lattice.
    auto* c8 = new LatticePoint3D(i1 + i2, j1 + (j2 ^ 1), k1 + k2, 1);
    auto* c9 = new LatticePoint3D(i1 + (i2 ^ 1), j1 + j2, k1 + (k2 ^ 1), 1);

    // (0, 0, 1) vs (1, 1, 0) away from octant.
    auto* cA = new LatticePoint3D(i1, j1, k1 ^ 1, 0);
    auto* cB = new LatticePoint3D(i1 ^ 1, j1 ^ 1, k1, 0);

    // (0, 0, 1) vs (1, 1, 0) away from octant, on second half-lattice.
    auto* cC = new LatticePoint3D(i1 + i2, j1 + j2, k1 + (k2 ^ 1), 1);
    auto* cD = new LatticePoint3D(i1 + (i2 ^ 1), j1 + (j2 ^ 1), k1 + k2, 1);

    // First two points are guaranteed.
    c0->nextOnFailure = c0->nextOnSuccess = c1;
    c1->nextOnFailure = c1->nextOnSuccess = c2;

    // If c2 is in range, then we know c3 and c4 are not.
    c2->nextOnFailure = c3;
    c2->nextOnSuccess = c5;
    c3->nextOnFailure = c4;
    c3->nextOnSuccess = c4;

    // If c4 is in range, then we know c5 is not.
    c4->nextOnFailure = c5;
    c4->nextOnSuccess = c6;
    c5->nextOnFailure = c5->nextOnSuccess = c6;

    // If c6 is in range, then we know c7 and c8 are not.
    c6->nextOnFailure = c7;
    c6->nextOnSuccess = c9;
    c7->nextOnFailure = c8;
    c7->nextOnSuccess = c8;

    // If c8 is in range, then we know c9 is not.
    c8->nextOnFailure = c9;
    c8->nextOnSuccess = cA;
    c9->nextOnFailure = c9->nextOnSuccess = cA;

    // If cA is in range, then we know cB and cC are not.
    cA->nextOnFailure = cB;
    cA->nextOnSuccess = cD;
    cB->nextOnFailure = cC;
    cB->nextOnSuccess = cC;

    // If cC is in range, then we know cD is not.
    cC->nextOnFailure = cD;
    cC->nextOnSuccess = nullptr;
    cD->nextOnFailure = cD->nextOnSuccess = nullptr;

    LOOKUP_3D[i] = *c0;
  }

  unsigned char lookup4DPregenSize[256] {
    // clang-format off
    20, 15, 16, 17, 15, 16, 12, 15, 16, 12, 10, 14, 17, 15, 14, 17,
    15, 16, 12, 15, 16, 14, 14, 13, 12, 14, 11, 12, 15, 13, 12, 14,
    16, 12, 10, 14, 12, 14, 11, 12, 10, 11, 10, 13, 14, 12, 13, 15,
    17, 15, 14, 17, 15, 13, 12, 14, 14, 12, 13, 15, 17, 14, 15, 17,
    15, 16, 12, 15, 16, 14, 14, 13, 12, 14, 11, 12, 15, 13, 12, 14,
    16, 14, 14, 13, 14, 16, 16, 10, 14, 16, 19, 11, 13, 10, 11, 10,
    12, 14, 11, 12, 14, 16, 19, 11, 11, 19, 13, 14, 12, 11, 14, 13,
    15, 13, 12, 14, 13, 10, 11, 10, 12, 11, 14, 13, 14, 10, 13, 13,
    16, 12, 10, 14, 12, 14, 11, 12, 10, 11, 10, 13, 14, 12, 13, 15,
    12, 14, 11, 12, 14, 16, 19, 11, 11, 19, 13, 14, 12, 11, 14, 13,
    10, 11, 10, 13, 11, 19, 13, 14, 10, 13, 16, 14, 13, 14, 14, 16,
    14, 12, 13, 15, 12, 11, 14, 13, 13, 14, 14, 16, 15, 13, 16, 15,
    17, 15, 14, 17, 15, 13, 12, 14, 14, 12, 13, 15, 17, 14, 15, 17,
    15, 13, 12, 14, 13, 10, 11, 10, 12, 11, 14, 13, 14, 10, 13, 13,
    14, 12, 13, 15, 12, 11, 14, 13, 13, 14, 14, 16, 15, 13, 16, 15,
    17, 14, 15, 17, 14, 10, 13, 13, 15, 13, 16, 15, 17, 13, 15, 20,
    // clang-format on
  };

  unsigned char lookup4DPregen[256][20] {
    // clang-format off
    { 0x15, 0x45, 0x51, 0x54, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA },
    { 0x15, 0x45, 0x51, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x6A, 0x95, 0x96, 0x9A, 0xA6, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x01, 0x05, 0x11, 0x15, 0x41, 0x45, 0x51, 0x55, 0x56, 0x5A, 0x66, 0x6A, 0x96, 0x9A, 0xA6, 0xAA, 0x00, 0x00, 0x00, 0x00 },
    { 0x01, 0x15, 0x16, 0x45, 0x46, 0x51, 0x52, 0x55, 0x56, 0x5A, 0x66, 0x6A, 0x96, 0x9A, 0xA6, 0xAA, 0xAB, 0x00, 0x00, 0x00 },
    { 0x15, 0x45, 0x54, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x69, 0x6A, 0x95, 0x99, 0x9A, 0xA9, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x05, 0x15, 0x45, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xAA, 0x00, 0x00, 0x00, 0x00 },
    { 0x05, 0x15, 0x45, 0x55, 0x56, 0x59, 0x5A, 0x66, 0x6A, 0x96, 0x9A, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x05, 0x15, 0x16, 0x45, 0x46, 0x55, 0x56, 0x59, 0x5A, 0x66, 0x6A, 0x96, 0x9A, 0xAA, 0xAB, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x04, 0x05, 0x14, 0x15, 0x44, 0x45, 0x54, 0x55, 0x59, 0x5A, 0x69, 0x6A, 0x99, 0x9A, 0xA9, 0xAA, 0x00, 0x00, 0x00, 0x00 },
    { 0x05, 0x15, 0x45, 0x55, 0x56, 0x59, 0x5A, 0x69, 0x6A, 0x99, 0x9A, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x05, 0x15, 0x45, 0x55, 0x56, 0x59, 0x5A, 0x6A, 0x9A, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x05, 0x15, 0x16, 0x45, 0x46, 0x55, 0x56, 0x59, 0x5A, 0x5B, 0x6A, 0x9A, 0xAA, 0xAB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x04, 0x15, 0x19, 0x45, 0x49, 0x54, 0x55, 0x58, 0x59, 0x5A, 0x69, 0x6A, 0x99, 0x9A, 0xA9, 0xAA, 0xAE, 0x00, 0x00, 0x00 },
    { 0x05, 0x15, 0x19, 0x45, 0x49, 0x55, 0x56, 0x59, 0x5A, 0x69, 0x6A, 0x99, 0x9A, 0xAA, 0xAE, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x05, 0x15, 0x19, 0x45, 0x49, 0x55, 0x56, 0x59, 0x5A, 0x5E, 0x6A, 0x9A, 0xAA, 0xAE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x05, 0x15, 0x1A, 0x45, 0x4A, 0x55, 0x56, 0x59, 0x5A, 0x5B, 0x5E, 0x6A, 0x9A, 0xAA, 0xAB, 0xAE, 0xAF, 0x00, 0x00, 0x00 },
    { 0x15, 0x51, 0x54, 0x55, 0x56, 0x59, 0x65, 0x66, 0x69, 0x6A, 0x95, 0xA5, 0xA6, 0xA9, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x11, 0x15, 0x51, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x96, 0xA5, 0xA6, 0xAA, 0x00, 0x00, 0x00, 0x00 },
    { 0x11, 0x15, 0x51, 0x55, 0x56, 0x5A, 0x65, 0x66, 0x6A, 0x96, 0xA6, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x11, 0x15, 0x16, 0x51, 0x52, 0x55, 0x56, 0x5A, 0x65, 0x66, 0x6A, 0x96, 0xA6, 0xAA, 0xAB, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x14, 0x15, 0x54, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x99, 0xA5, 0xA9, 0xAA, 0x00, 0x00, 0x00, 0x00 },
    { 0x15, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x9A, 0xA6, 0xA9, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x15, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x96, 0x9A, 0xA6, 0xAA, 0xAB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x15, 0x16, 0x55, 0x56, 0x5A, 0x66, 0x6A, 0x6B, 0x96, 0x9A, 0xA6, 0xAA, 0xAB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x14, 0x15, 0x54, 0x55, 0x59, 0x5A, 0x65, 0x69, 0x6A, 0x99, 0xA9, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x15, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x99, 0x9A, 0xA9, 0xAA, 0xAE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x15, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x9A, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x15, 0x16, 0x55, 0x56, 0x59, 0x5A, 0x66, 0x6A, 0x6B, 0x9A, 0xAA, 0xAB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x14, 0x15, 0x19, 0x54, 0x55, 0x58, 0x59, 0x5A, 0x65, 0x69, 0x6A, 0x99, 0xA9, 0xAA, 0xAE, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x15, 0x19, 0x55, 0x59, 0x5A, 0x69, 0x6A, 0x6E, 0x99, 0x9A, 0xA9, 0xAA, 0xAE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x15, 0x19, 0x55, 0x56, 0x59, 0x5A, 0x69, 0x6A, 0x6E, 0x9A, 0xAA, 0xAE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x15, 0x1A, 0x55, 0x56, 0x59, 0x5A, 0x6A, 0x6B, 0x6E, 0x9A, 0xAA, 0xAB, 0xAE, 0xAF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x10, 0x11, 0x14, 0x15, 0x50, 0x51, 0x54, 0x55, 0x65, 0x66, 0x69, 0x6A, 0xA5, 0xA6, 0xA9, 0xAA, 0x00, 0x00, 0x00, 0x00 },
    { 0x11, 0x15, 0x51, 0x55, 0x56, 0x65, 0x66, 0x69, 0x6A, 0xA5, 0xA6, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x11, 0x15, 0x51, 0x55, 0x56, 0x65, 0x66, 0x6A, 0xA6, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x11, 0x15, 0x16, 0x51, 0x52, 0x55, 0x56, 0x65, 0x66, 0x67, 0x6A, 0xA6, 0xAA, 0xAB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x14, 0x15, 0x54, 0x55, 0x59, 0x65, 0x66, 0x69, 0x6A, 0xA5, 0xA9, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x15, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x15, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0xA6, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x15, 0x16, 0x55, 0x56, 0x5A, 0x65, 0x66, 0x6A, 0x6B, 0xA6, 0xAA, 0xAB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x14, 0x15, 0x54, 0x55, 0x59, 0x65, 0x69, 0x6A, 0xA9, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x15, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0xA9, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x15, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x15, 0x16, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x6B, 0xAA, 0xAB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x14, 0x15, 0x19, 0x54, 0x55, 0x58, 0x59, 0x65, 0x69, 0x6A, 0x6D, 0xA9, 0xAA, 0xAE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x15, 0x19, 0x55, 0x59, 0x5A, 0x65, 0x69, 0x6A, 0x6E, 0xA9, 0xAA, 0xAE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x15, 0x19, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x6E, 0xAA, 0xAE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x15, 0x55, 0x56, 0x59, 0x5A, 0x66, 0x69, 0x6A, 0x6B, 0x6E, 0x9A, 0xAA, 0xAB, 0xAE, 0xAF, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x10, 0x15, 0x25, 0x51, 0x54, 0x55, 0x61, 0x64, 0x65, 0x66, 0x69, 0x6A, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA, 0x00, 0x00, 0x00 },
    { 0x11, 0x15, 0x25, 0x51, 0x55, 0x56, 0x61, 0x65, 0x66, 0x69, 0x6A, 0xA5, 0xA6, 0xAA, 0xBA, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x11, 0x15, 0x25, 0x51, 0x55, 0x56, 0x61, 0x65, 0x66, 0x6A, 0x76, 0xA6, 0xAA, 0xBA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x11, 0x15, 0x26, 0x51, 0x55, 0x56, 0x62, 0x65, 0x66, 0x67, 0x6A, 0x76, 0xA6, 0xAA, 0xAB, 0xBA, 0xBB, 0x00, 0x00, 0x00 },
    { 0x14, 0x15, 0x25, 0x54, 0x55, 0x59, 0x64, 0x65, 0x66, 0x69, 0x6A, 0xA5, 0xA9, 0xAA, 0xBA, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x15, 0x25, 0x55, 0x65, 0x66, 0x69, 0x6A, 0x7A, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x15, 0x25, 0x55, 0x56, 0x65, 0x66, 0x69, 0x6A, 0x7A, 0xA6, 0xAA, 0xBA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x15, 0x26, 0x55, 0x56, 0x65, 0x66, 0x6A, 0x6B, 0x7A, 0xA6, 0xAA, 0xAB, 0xBA, 0xBB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x14, 0x15, 0x25, 0x54, 0x55, 0x59, 0x64, 0x65, 0x69, 0x6A, 0x79, 0xA9, 0xAA, 0xBA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x15, 0x25, 0x55, 0x59, 0x65, 0x66, 0x69, 0x6A, 0x7A, 0xA9, 0xAA, 0xBA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x15, 0x25, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x7A, 0xAA, 0xBA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x15, 0x55, 0x56, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x6B, 0x7A, 0xA6, 0xAA, 0xAB, 0xBA, 0xBB, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x14, 0x15, 0x29, 0x54, 0x55, 0x59, 0x65, 0x68, 0x69, 0x6A, 0x6D, 0x79, 0xA9, 0xAA, 0xAE, 0xBA, 0xBE, 0x00, 0x00, 0x00 },
    { 0x15, 0x29, 0x55, 0x59, 0x65, 0x69, 0x6A, 0x6E, 0x7A, 0xA9, 0xAA, 0xAE, 0xBA, 0xBE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x15, 0x55, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x6E, 0x7A, 0xA9, 0xAA, 0xAE, 0xBA, 0xBE, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x15, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x6B, 0x6E, 0x7A, 0xAA, 0xAB, 0xAE, 0xBA, 0xBF, 0x00, 0x00, 0x00 },
    { 0x45, 0x51, 0x54, 0x55, 0x56, 0x59, 0x65, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x41, 0x45, 0x51, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xAA, 0x00, 0x00, 0x00, 0x00 },
    { 0x41, 0x45, 0x51, 0x55, 0x56, 0x5A, 0x66, 0x95, 0x96, 0x9A, 0xA6, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x41, 0x45, 0x46, 0x51, 0x52, 0x55, 0x56, 0x5A, 0x66, 0x95, 0x96, 0x9A, 0xA6, 0xAA, 0xAB, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x44, 0x45, 0x54, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x69, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA9, 0xAA, 0x00, 0x00, 0x00, 0x00 },
    { 0x45, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA6, 0xA9, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x45, 0x55, 0x56, 0x59, 0x5A, 0x66, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA6, 0xAA, 0xAB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x45, 0x46, 0x55, 0x56, 0x5A, 0x66, 0x6A, 0x96, 0x9A, 0x9B, 0xA6, 0xAA, 0xAB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x44, 0x45, 0x54, 0x55, 0x59, 0x5A, 0x69, 0x95, 0x99, 0x9A, 0xA9, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x45, 0x55, 0x56, 0x59, 0x5A, 0x69, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA9, 0xAA, 0xAE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x45, 0x55, 0x56, 0x59, 0x5A, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x45, 0x46, 0x55, 0x56, 0x59, 0x5A, 0x6A, 0x96, 0x9A, 0x9B, 0xAA, 0xAB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x44, 0x45, 0x49, 0x54, 0x55, 0x58, 0x59, 0x5A, 0x69, 0x95, 0x99, 0x9A, 0xA9, 0xAA, 0xAE, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x45, 0x49, 0x55, 0x59, 0x5A, 0x69, 0x6A, 0x99, 0x9A, 0x9E, 0xA9, 0xAA, 0xAE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x45, 0x49, 0x55, 0x56, 0x59, 0x5A, 0x6A, 0x99, 0x9A, 0x9E, 0xAA, 0xAE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x45, 0x4A, 0x55, 0x56, 0x59, 0x5A, 0x6A, 0x9A, 0x9B, 0x9E, 0xAA, 0xAB, 0xAE, 0xAF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x50, 0x51, 0x54, 0x55, 0x56, 0x59, 0x65, 0x66, 0x69, 0x95, 0x96, 0x99, 0xA5, 0xA6, 0xA9, 0xAA, 0x00, 0x00, 0x00, 0x00 },
    { 0x51, 0x55, 0x56, 0x59, 0x65, 0x66, 0x6A, 0x95, 0x96, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x51, 0x55, 0x56, 0x5A, 0x65, 0x66, 0x6A, 0x95, 0x96, 0x9A, 0xA5, 0xA6, 0xAA, 0xAB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x51, 0x52, 0x55, 0x56, 0x5A, 0x66, 0x6A, 0x96, 0x9A, 0xA6, 0xA7, 0xAA, 0xAB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x54, 0x55, 0x56, 0x59, 0x65, 0x69, 0x6A, 0x95, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0x00, 0x00, 0x00, 0x00 },
    { 0x15, 0x45, 0x51, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x6A, 0x95, 0x96, 0x9A, 0xA6, 0xAA, 0xAB, 0x00, 0x00, 0x00, 0x00 },
    { 0x55, 0x56, 0x5A, 0x66, 0x6A, 0x96, 0x9A, 0xA6, 0xAA, 0xAB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x54, 0x55, 0x59, 0x5A, 0x65, 0x69, 0x6A, 0x95, 0x99, 0x9A, 0xA5, 0xA9, 0xAA, 0xAE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x15, 0x45, 0x54, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x69, 0x6A, 0x95, 0x99, 0x9A, 0xA9, 0xAA, 0xAE, 0x00, 0x00, 0x00, 0x00 },
    { 0x15, 0x45, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA6, 0xA9, 0xAA, 0xAB, 0xAE, 0x00 },
    { 0x55, 0x56, 0x59, 0x5A, 0x66, 0x6A, 0x96, 0x9A, 0xA6, 0xAA, 0xAB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x54, 0x55, 0x58, 0x59, 0x5A, 0x69, 0x6A, 0x99, 0x9A, 0xA9, 0xAA, 0xAD, 0xAE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x55, 0x59, 0x5A, 0x69, 0x6A, 0x99, 0x9A, 0xA9, 0xAA, 0xAE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x55, 0x56, 0x59, 0x5A, 0x69, 0x6A, 0x99, 0x9A, 0xA9, 0xAA, 0xAE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x55, 0x56, 0x59, 0x5A, 0x6A, 0x9A, 0xAA, 0xAB, 0xAE, 0xAF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x50, 0x51, 0x54, 0x55, 0x65, 0x66, 0x69, 0x95, 0xA5, 0xA6, 0xA9, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x51, 0x55, 0x56, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x96, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x51, 0x55, 0x56, 0x65, 0x66, 0x6A, 0x95, 0x96, 0xA5, 0xA6, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x51, 0x52, 0x55, 0x56, 0x65, 0x66, 0x6A, 0x96, 0xA6, 0xA7, 0xAA, 0xAB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x54, 0x55, 0x59, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x99, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x15, 0x51, 0x54, 0x55, 0x56, 0x59, 0x65, 0x66, 0x69, 0x6A, 0x95, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA, 0x00, 0x00, 0x00, 0x00 },
    { 0x15, 0x51, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x96, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xAB, 0xBA, 0x00 },
    { 0x55, 0x56, 0x5A, 0x65, 0x66, 0x6A, 0x96, 0x9A, 0xA6, 0xAA, 0xAB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x54, 0x55, 0x59, 0x65, 0x69, 0x6A, 0x95, 0x99, 0xA5, 0xA9, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x15, 0x54, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xAE, 0xBA, 0x00 },
    { 0x15, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x9A, 0xA6, 0xA9, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x15, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x96, 0x9A, 0xA6, 0xAA, 0xAB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x54, 0x55, 0x58, 0x59, 0x65, 0x69, 0x6A, 0x99, 0xA9, 0xAA, 0xAD, 0xAE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x55, 0x59, 0x5A, 0x65, 0x69, 0x6A, 0x99, 0x9A, 0xA9, 0xAA, 0xAE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x15, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x99, 0x9A, 0xA9, 0xAA, 0xAE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x15, 0x55, 0x56, 0x59, 0x5A, 0x66, 0x69, 0x6A, 0x9A, 0xAA, 0xAB, 0xAE, 0xAF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x50, 0x51, 0x54, 0x55, 0x61, 0x64, 0x65, 0x66, 0x69, 0x95, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x51, 0x55, 0x61, 0x65, 0x66, 0x69, 0x6A, 0xA5, 0xA6, 0xA9, 0xAA, 0xB6, 0xBA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x51, 0x55, 0x56, 0x61, 0x65, 0x66, 0x6A, 0xA5, 0xA6, 0xAA, 0xB6, 0xBA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x51, 0x55, 0x56, 0x62, 0x65, 0x66, 0x6A, 0xA6, 0xA7, 0xAA, 0xAB, 0xB6, 0xBA, 0xBB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x54, 0x55, 0x64, 0x65, 0x66, 0x69, 0x6A, 0xA5, 0xA6, 0xA9, 0xAA, 0xB9, 0xBA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x55, 0x65, 0x66, 0x69, 0x6A, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x55, 0x56, 0x65, 0x66, 0x69, 0x6A, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x55, 0x56, 0x65, 0x66, 0x6A, 0xA6, 0xAA, 0xAB, 0xBA, 0xBB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x54, 0x55, 0x59, 0x64, 0x65, 0x69, 0x6A, 0xA5, 0xA9, 0xAA, 0xB9, 0xBA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x55, 0x59, 0x65, 0x66, 0x69, 0x6A, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x15, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x15, 0x55, 0x56, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0xA6, 0xAA, 0xAB, 0xBA, 0xBB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x54, 0x55, 0x59, 0x65, 0x68, 0x69, 0x6A, 0xA9, 0xAA, 0xAD, 0xAE, 0xB9, 0xBA, 0xBE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x55, 0x59, 0x65, 0x69, 0x6A, 0xA9, 0xAA, 0xAE, 0xBA, 0xBE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x15, 0x55, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0xA9, 0xAA, 0xAE, 0xBA, 0xBE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0xAA, 0xAB, 0xAE, 0xBA, 0xBF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x40, 0x41, 0x44, 0x45, 0x50, 0x51, 0x54, 0x55, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0x00, 0x00, 0x00, 0x00 },
    { 0x41, 0x45, 0x51, 0x55, 0x56, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x41, 0x45, 0x51, 0x55, 0x56, 0x95, 0x96, 0x9A, 0xA6, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x41, 0x45, 0x46, 0x51, 0x52, 0x55, 0x56, 0x95, 0x96, 0x97, 0x9A, 0xA6, 0xAA, 0xAB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x44, 0x45, 0x54, 0x55, 0x59, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA9, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x45, 0x55, 0x56, 0x59, 0x5A, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xEA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x45, 0x55, 0x56, 0x59, 0x5A, 0x95, 0x96, 0x99, 0x9A, 0xA6, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x45, 0x46, 0x55, 0x56, 0x5A, 0x95, 0x96, 0x9A, 0x9B, 0xA6, 0xAA, 0xAB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x44, 0x45, 0x54, 0x55, 0x59, 0x95, 0x99, 0x9A, 0xA9, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x45, 0x55, 0x56, 0x59, 0x5A, 0x95, 0x96, 0x99, 0x9A, 0xA9, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x45, 0x55, 0x56, 0x59, 0x5A, 0x95, 0x96, 0x99, 0x9A, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x45, 0x46, 0x55, 0x56, 0x59, 0x5A, 0x95, 0x96, 0x99, 0x9A, 0x9B, 0xAA, 0xAB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x44, 0x45, 0x49, 0x54, 0x55, 0x58, 0x59, 0x95, 0x99, 0x9A, 0x9D, 0xA9, 0xAA, 0xAE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x45, 0x49, 0x55, 0x59, 0x5A, 0x95, 0x99, 0x9A, 0x9E, 0xA9, 0xAA, 0xAE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x45, 0x49, 0x55, 0x56, 0x59, 0x5A, 0x95, 0x96, 0x99, 0x9A, 0x9E, 0xAA, 0xAE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x45, 0x55, 0x56, 0x59, 0x5A, 0x6A, 0x96, 0x99, 0x9A, 0x9B, 0x9E, 0xAA, 0xAB, 0xAE, 0xAF, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x50, 0x51, 0x54, 0x55, 0x65, 0x95, 0x96, 0x99, 0xA5, 0xA6, 0xA9, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x51, 0x55, 0x56, 0x65, 0x66, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xEA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x51, 0x55, 0x56, 0x65, 0x66, 0x95, 0x96, 0x9A, 0xA5, 0xA6, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x51, 0x52, 0x55, 0x56, 0x66, 0x95, 0x96, 0x9A, 0xA6, 0xA7, 0xAA, 0xAB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x54, 0x55, 0x59, 0x65, 0x69, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xEA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x45, 0x51, 0x54, 0x55, 0x56, 0x59, 0x65, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xEA, 0x00, 0x00, 0x00, 0x00 },
    { 0x45, 0x51, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xAB, 0xEA, 0x00 },
    { 0x55, 0x56, 0x5A, 0x66, 0x6A, 0x95, 0x96, 0x9A, 0xA6, 0xAA, 0xAB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x54, 0x55, 0x59, 0x65, 0x69, 0x95, 0x99, 0x9A, 0xA5, 0xA9, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x45, 0x54, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x69, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xAE, 0xEA, 0x00 },
    { 0x45, 0x55, 0x56, 0x59, 0x5A, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA6, 0xA9, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x45, 0x55, 0x56, 0x59, 0x5A, 0x66, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA6, 0xAA, 0xAB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x54, 0x55, 0x58, 0x59, 0x69, 0x95, 0x99, 0x9A, 0xA9, 0xAA, 0xAD, 0xAE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x55, 0x59, 0x5A, 0x69, 0x6A, 0x95, 0x99, 0x9A, 0xA9, 0xAA, 0xAE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x45, 0x55, 0x56, 0x59, 0x5A, 0x69, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA9, 0xAA, 0xAE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x45, 0x55, 0x56, 0x59, 0x5A, 0x6A, 0x96, 0x99, 0x9A, 0xAA, 0xAB, 0xAE, 0xAF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x50, 0x51, 0x54, 0x55, 0x65, 0x95, 0xA5, 0xA6, 0xA9, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x51, 0x55, 0x56, 0x65, 0x66, 0x95, 0x96, 0xA5, 0xA6, 0xA9, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x51, 0x55, 0x56, 0x65, 0x66, 0x95, 0x96, 0xA5, 0xA6, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x51, 0x52, 0x55, 0x56, 0x65, 0x66, 0x95, 0x96, 0xA5, 0xA6, 0xA7, 0xAA, 0xAB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x54, 0x55, 0x59, 0x65, 0x69, 0x95, 0x99, 0xA5, 0xA6, 0xA9, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x51, 0x54, 0x55, 0x56, 0x59, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA, 0xEA, 0x00 },
    { 0x51, 0x55, 0x56, 0x65, 0x66, 0x6A, 0x95, 0x96, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x51, 0x55, 0x56, 0x5A, 0x65, 0x66, 0x6A, 0x95, 0x96, 0x9A, 0xA5, 0xA6, 0xAA, 0xAB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x54, 0x55, 0x59, 0x65, 0x69, 0x95, 0x99, 0xA5, 0xA9, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x54, 0x55, 0x59, 0x65, 0x69, 0x6A, 0x95, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0x00, 0x00, 0x00, 0x00 },
    { 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x6A, 0x95, 0x96, 0x9A, 0xA6, 0xA9, 0xAA, 0xAB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x54, 0x55, 0x58, 0x59, 0x65, 0x69, 0x95, 0x99, 0xA5, 0xA9, 0xAA, 0xAD, 0xAE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x54, 0x55, 0x59, 0x5A, 0x65, 0x69, 0x6A, 0x95, 0x99, 0x9A, 0xA5, 0xA9, 0xAA, 0xAE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x55, 0x56, 0x59, 0x5A, 0x65, 0x69, 0x6A, 0x95, 0x99, 0x9A, 0xA6, 0xA9, 0xAA, 0xAE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x55, 0x56, 0x59, 0x5A, 0x66, 0x69, 0x6A, 0x96, 0x99, 0x9A, 0xA6, 0xA9, 0xAA, 0xAB, 0xAE, 0xAF, 0x00, 0x00, 0x00, 0x00 },
    { 0x50, 0x51, 0x54, 0x55, 0x61, 0x64, 0x65, 0x95, 0xA5, 0xA6, 0xA9, 0xAA, 0xB5, 0xBA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x51, 0x55, 0x61, 0x65, 0x66, 0x95, 0xA5, 0xA6, 0xA9, 0xAA, 0xB6, 0xBA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x51, 0x55, 0x56, 0x61, 0x65, 0x66, 0x95, 0x96, 0xA5, 0xA6, 0xAA, 0xB6, 0xBA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x51, 0x55, 0x56, 0x65, 0x66, 0x6A, 0x96, 0xA5, 0xA6, 0xA7, 0xAA, 0xAB, 0xB6, 0xBA, 0xBB, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x54, 0x55, 0x64, 0x65, 0x69, 0x95, 0xA5, 0xA6, 0xA9, 0xAA, 0xB9, 0xBA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x55, 0x65, 0x66, 0x69, 0x6A, 0x95, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x51, 0x55, 0x56, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x96, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x51, 0x55, 0x56, 0x65, 0x66, 0x6A, 0x96, 0xA5, 0xA6, 0xAA, 0xAB, 0xBA, 0xBB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x54, 0x55, 0x59, 0x64, 0x65, 0x69, 0x95, 0x99, 0xA5, 0xA9, 0xAA, 0xB9, 0xBA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x54, 0x55, 0x59, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x99, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x55, 0x56, 0x59, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x55, 0x56, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x96, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xAB, 0xBA, 0xBB, 0x00, 0x00, 0x00, 0x00 },
    { 0x54, 0x55, 0x59, 0x65, 0x69, 0x6A, 0x99, 0xA5, 0xA9, 0xAA, 0xAD, 0xAE, 0xB9, 0xBA, 0xBE, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x54, 0x55, 0x59, 0x65, 0x69, 0x6A, 0x99, 0xA5, 0xA9, 0xAA, 0xAE, 0xBA, 0xBE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x55, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xAE, 0xBA, 0xBE, 0x00, 0x00, 0x00, 0x00 },
    { 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x9A, 0xA6, 0xA9, 0xAA, 0xAB, 0xAE, 0xBA, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x40, 0x45, 0x51, 0x54, 0x55, 0x85, 0x91, 0x94, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xEA, 0x00, 0x00, 0x00 },
    { 0x41, 0x45, 0x51, 0x55, 0x56, 0x85, 0x91, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xAA, 0xEA, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x41, 0x45, 0x51, 0x55, 0x56, 0x85, 0x91, 0x95, 0x96, 0x9A, 0xA6, 0xAA, 0xD6, 0xEA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x41, 0x45, 0x51, 0x55, 0x56, 0x86, 0x92, 0x95, 0x96, 0x97, 0x9A, 0xA6, 0xAA, 0xAB, 0xD6, 0xEA, 0xEB, 0x00, 0x00, 0x00 },
    { 0x44, 0x45, 0x54, 0x55, 0x59, 0x85, 0x94, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA9, 0xAA, 0xEA, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x45, 0x55, 0x85, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xDA, 0xEA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x45, 0x55, 0x56, 0x85, 0x95, 0x96, 0x99, 0x9A, 0xA6, 0xAA, 0xDA, 0xEA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x45, 0x55, 0x56, 0x86, 0x95, 0x96, 0x9A, 0x9B, 0xA6, 0xAA, 0xAB, 0xDA, 0xEA, 0xEB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x44, 0x45, 0x54, 0x55, 0x59, 0x85, 0x94, 0x95, 0x99, 0x9A, 0xA9, 0xAA, 0xD9, 0xEA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x45, 0x55, 0x59, 0x85, 0x95, 0x96, 0x99, 0x9A, 0xA9, 0xAA, 0xDA, 0xEA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x45, 0x55, 0x56, 0x59, 0x5A, 0x85, 0x95, 0x96, 0x99, 0x9A, 0xAA, 0xDA, 0xEA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x45, 0x55, 0x56, 0x5A, 0x95, 0x96, 0x99, 0x9A, 0x9B, 0xA6, 0xAA, 0xAB, 0xDA, 0xEA, 0xEB, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x44, 0x45, 0x54, 0x55, 0x59, 0x89, 0x95, 0x98, 0x99, 0x9A, 0x9D, 0xA9, 0xAA, 0xAE, 0xD9, 0xEA, 0xEE, 0x00, 0x00, 0x00 },
    { 0x45, 0x55, 0x59, 0x89, 0x95, 0x99, 0x9A, 0x9E, 0xA9, 0xAA, 0xAE, 0xDA, 0xEA, 0xEE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x45, 0x55, 0x59, 0x5A, 0x95, 0x96, 0x99, 0x9A, 0x9E, 0xA9, 0xAA, 0xAE, 0xDA, 0xEA, 0xEE, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x45, 0x55, 0x56, 0x59, 0x5A, 0x95, 0x96, 0x99, 0x9A, 0x9B, 0x9E, 0xAA, 0xAB, 0xAE, 0xDA, 0xEA, 0xEF, 0x00, 0x00, 0x00 },
    { 0x50, 0x51, 0x54, 0x55, 0x65, 0x91, 0x94, 0x95, 0x96, 0x99, 0xA5, 0xA6, 0xA9, 0xAA, 0xEA, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x51, 0x55, 0x91, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xE6, 0xEA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x51, 0x55, 0x56, 0x91, 0x95, 0x96, 0x9A, 0xA5, 0xA6, 0xAA, 0xE6, 0xEA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x51, 0x55, 0x56, 0x92, 0x95, 0x96, 0x9A, 0xA6, 0xA7, 0xAA, 0xAB, 0xE6, 0xEA, 0xEB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x54, 0x55, 0x94, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xE9, 0xEA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x55, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xEA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x55, 0x56, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xEA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x55, 0x56, 0x95, 0x96, 0x9A, 0xA6, 0xAA, 0xAB, 0xEA, 0xEB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x54, 0x55, 0x59, 0x94, 0x95, 0x99, 0x9A, 0xA5, 0xA9, 0xAA, 0xE9, 0xEA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x55, 0x59, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xEA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x45, 0x55, 0x56, 0x59, 0x5A, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xEA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x45, 0x55, 0x56, 0x5A, 0x95, 0x96, 0x99, 0x9A, 0xA6, 0xAA, 0xAB, 0xEA, 0xEB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x54, 0x55, 0x59, 0x95, 0x98, 0x99, 0x9A, 0xA9, 0xAA, 0xAD, 0xAE, 0xE9, 0xEA, 0xEE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x55, 0x59, 0x95, 0x99, 0x9A, 0xA9, 0xAA, 0xAE, 0xEA, 0xEE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x45, 0x55, 0x59, 0x5A, 0x95, 0x96, 0x99, 0x9A, 0xA9, 0xAA, 0xAE, 0xEA, 0xEE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x55, 0x56, 0x59, 0x5A, 0x95, 0x96, 0x99, 0x9A, 0xAA, 0xAB, 0xAE, 0xEA, 0xEF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x50, 0x51, 0x54, 0x55, 0x65, 0x91, 0x94, 0x95, 0xA5, 0xA6, 0xA9, 0xAA, 0xE5, 0xEA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x51, 0x55, 0x65, 0x91, 0x95, 0x96, 0xA5, 0xA6, 0xA9, 0xAA, 0xE6, 0xEA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x51, 0x55, 0x56, 0x65, 0x66, 0x91, 0x95, 0x96, 0xA5, 0xA6, 0xAA, 0xE6, 0xEA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x51, 0x55, 0x56, 0x66, 0x95, 0x96, 0x9A, 0xA5, 0xA6, 0xA7, 0xAA, 0xAB, 0xE6, 0xEA, 0xEB, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x54, 0x55, 0x65, 0x94, 0x95, 0x99, 0xA5, 0xA6, 0xA9, 0xAA, 0xE9, 0xEA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x55, 0x65, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xEA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x51, 0x55, 0x56, 0x65, 0x66, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xEA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x51, 0x55, 0x56, 0x66, 0x95, 0x96, 0x9A, 0xA5, 0xA6, 0xAA, 0xAB, 0xEA, 0xEB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x54, 0x55, 0x59, 0x65, 0x69, 0x94, 0x95, 0x99, 0xA5, 0xA9, 0xAA, 0xE9, 0xEA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x54, 0x55, 0x59, 0x65, 0x69, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xEA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x55, 0x56, 0x59, 0x65, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xEA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x55, 0x56, 0x5A, 0x66, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xAB, 0xEA, 0xEB, 0x00, 0x00, 0x00, 0x00 },
    { 0x54, 0x55, 0x59, 0x69, 0x95, 0x99, 0x9A, 0xA5, 0xA9, 0xAA, 0xAD, 0xAE, 0xE9, 0xEA, 0xEE, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x54, 0x55, 0x59, 0x69, 0x95, 0x99, 0x9A, 0xA5, 0xA9, 0xAA, 0xAE, 0xEA, 0xEE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x55, 0x59, 0x5A, 0x69, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xAE, 0xEA, 0xEE, 0x00, 0x00, 0x00, 0x00 },
    { 0x55, 0x56, 0x59, 0x5A, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA6, 0xA9, 0xAA, 0xAB, 0xAE, 0xEA, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x50, 0x51, 0x54, 0x55, 0x65, 0x95, 0xA1, 0xA4, 0xA5, 0xA6, 0xA9, 0xAA, 0xB5, 0xBA, 0xE5, 0xEA, 0xFA, 0x00, 0x00, 0x00 },
    { 0x51, 0x55, 0x65, 0x95, 0xA1, 0xA5, 0xA6, 0xA9, 0xAA, 0xB6, 0xBA, 0xE6, 0xEA, 0xFA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x51, 0x55, 0x65, 0x66, 0x95, 0x96, 0xA5, 0xA6, 0xA9, 0xAA, 0xB6, 0xBA, 0xE6, 0xEA, 0xFA, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x51, 0x55, 0x56, 0x65, 0x66, 0x95, 0x96, 0xA5, 0xA6, 0xA7, 0xAA, 0xAB, 0xB6, 0xBA, 0xE6, 0xEA, 0xFB, 0x00, 0x00, 0x00 },
    { 0x54, 0x55, 0x65, 0x95, 0xA4, 0xA5, 0xA6, 0xA9, 0xAA, 0xB9, 0xBA, 0xE9, 0xEA, 0xFA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x55, 0x65, 0x95, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA, 0xEA, 0xFA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x51, 0x55, 0x65, 0x66, 0x95, 0x96, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA, 0xEA, 0xFA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x55, 0x56, 0x65, 0x66, 0x95, 0x96, 0xA5, 0xA6, 0xAA, 0xAB, 0xBA, 0xEA, 0xFB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x54, 0x55, 0x65, 0x69, 0x95, 0x99, 0xA5, 0xA6, 0xA9, 0xAA, 0xB9, 0xBA, 0xE9, 0xEA, 0xFA, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x54, 0x55, 0x65, 0x69, 0x95, 0x99, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA, 0xEA, 0xFA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x55, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA, 0xEA, 0xFA, 0x00, 0x00, 0x00, 0x00 },
    { 0x55, 0x56, 0x65, 0x66, 0x6A, 0x95, 0x96, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xAB, 0xBA, 0xEA, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x54, 0x55, 0x59, 0x65, 0x69, 0x95, 0x99, 0xA5, 0xA9, 0xAA, 0xAD, 0xAE, 0xB9, 0xBA, 0xE9, 0xEA, 0xFE, 0x00, 0x00, 0x00 },
    { 0x55, 0x59, 0x65, 0x69, 0x95, 0x99, 0xA5, 0xA9, 0xAA, 0xAE, 0xBA, 0xEA, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x55, 0x59, 0x65, 0x69, 0x6A, 0x95, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xAE, 0xBA, 0xEA, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xAB, 0xAE, 0xBA, 0xEA },
    // clang-format on
  };

  LatticePoint4D latticePoints[256];
  for (int i = 0; i < 256; i++) {
    int cx = ((i >> 0) & 3) - 1;
    int cy = ((i >> 2) & 3) - 1;
    int cz = ((i >> 4) & 3) - 1;
    int cw = ((i >> 6) & 3) - 1;
    latticePoints[i] = { cx, cy, cz, cw };
  }
  for (unsigned int i = 0; i < 256; i++) {
    LOOKUP_4D_SIZE[i] = lookup4DPregenSize[i];
    for (unsigned char j = 0; j < lookup4DPregenSize[i]; j++) {
      LOOKUP_4D[i][j] = latticePoints[lookup4DPregen[i][j]];
    }
  }
}

void OpenSimplex2S::initGradients()
{
  static const int grad2_size = 24;
  Grad2 grad2[grad2_size] {
    { 0.130526192220052, 0.99144486137381 },    { 0.38268343236509, 0.923879532511287 },
    { 0.608761429008721, 0.793353340291235 },   { 0.793353340291235, 0.608761429008721 },
    { 0.923879532511287, 0.38268343236509 },    { 0.99144486137381, 0.130526192220051 },
    { 0.99144486137381, -0.130526192220051 },   { 0.923879532511287, -0.38268343236509 },
    { 0.793353340291235, -0.60876142900872 },   { 0.608761429008721, -0.793353340291235 },
    { 0.38268343236509, -0.923879532511287 },   { 0.130526192220052, -0.99144486137381 },
    { -0.130526192220052, -0.99144486137381 },  { -0.38268343236509, -0.923879532511287 },
    { -0.608761429008721, -0.793353340291235 }, { -0.793353340291235, -0.608761429008721 },
    { -0.923879532511287, -0.38268343236509 },  { -0.99144486137381, -0.130526192220052 },
    { -0.99144486137381, 0.130526192220051 },   { -0.923879532511287, 0.38268343236509 },
    { -0.793353340291235, 0.608761429008721 },  { -0.608761429008721, 0.793353340291235 },
    { -0.38268343236509, 0.923879532511287 },   { -0.130526192220052, 0.99144486137381 },
  };
  for (int i = 0; i < grad2_size; i++) {
    grad2[i].dx /= N2;
    grad2[i].dy /= N2;
  }
  for (int i = 0; i < PSIZE; i++) {
    GRADIENTS_2D[i] = grad2[i % grad2_size];
  }

  static const int grad3_size = 48;
  Grad3 grad3[grad3_size] {
    { -2.22474487139, -2.22474487139, -1.0 },
    { -2.22474487139, -2.22474487139, 1.0 },
    { -3.0862664687972017, -1.1721513422464978, 0.0 },
    { -1.1721513422464978, -3.0862664687972017, 0.0 },
    { -2.22474487139, -1.0, -2.22474487139 },
    { -2.22474487139, 1.0, -2.22474487139 },
    { -1.1721513422464978, 0.0, -3.0862664687972017 },
    { -3.0862664687972017, 0.0, -1.1721513422464978 },
    { -2.22474487139, -1.0, 2.22474487139 },
    { -2.22474487139, 1.0, 2.22474487139 },
    { -3.0862664687972017, 0.0, 1.1721513422464978 },
    { -1.1721513422464978, 0.0, 3.0862664687972017 },
    { -2.22474487139, 2.22474487139, -1.0 },
    { -2.22474487139, 2.22474487139, 1.0 },
    { -1.1721513422464978, 3.0862664687972017, 0.0 },
    { -3.0862664687972017, 1.1721513422464978, 0.0 },
    { -1.0, -2.22474487139, -2.22474487139 },
    { 1.0, -2.22474487139, -2.22474487139 },
    { 0.0, -3.0862664687972017, -1.1721513422464978 },
    { 0.0, -1.1721513422464978, -3.0862664687972017 },
    { -1.0, -2.22474487139, 2.22474487139 },
    { 1.0, -2.22474487139, 2.22474487139 },
    { 0.0, -1.1721513422464978, 3.0862664687972017 },
    { 0.0, -3.0862664687972017, 1.1721513422464978 },
    { -1.0, 2.22474487139, -2.22474487139 },
    { 1.0, 2.22474487139, -2.22474487139 },
    { 0.0, 1.1721513422464978, -3.0862664687972017 },
    { 0.0, 3.0862664687972017, -1.1721513422464978 },
    { -1.0, 2.22474487139, 2.22474487139 },
    { 1.0, 2.22474487139, 2.22474487139 },
    { 0.0, 3.0862664687972017, 1.1721513422464978 },
    { 0.0, 1.1721513422464978, 3.0862664687972017 },
    { 2.22474487139, -2.22474487139, -1.0 },
    { 2.22474487139, -2.22474487139, 1.0 },
    { 1.1721513422464978, -3.0862664687972017, 0.0 },
    { 3.0862664687972017, -1.1721513422464978, 0.0 },
    { 2.22474487139, -1.0, -2.22474487139 },
    { 2.22474487139, 1.0, -2.22474487139 },
    { 3.0862664687972017, 0.0, -1.1721513422464978 },
    { 1.1721513422464978, 0.0, -3.0862664687972017 },
    { 2.22474487139, -1.0, 2.22474487139 },
    { 2.22474487139, 1.0, 2.22474487139 },
    { 1.1721513422464978, 0.0, 3.0862664687972017 },
    { 3.0862664687972017, 0.0, 1.1721513422464978 },
    { 2.22474487139, 2.22474487139, -1.0 },
    { 2.22474487139, 2.22474487139, 1.0 },
    { 3.0862664687972017, 1.1721513422464978, 0.0 },
    { 1.1721513422464978, 3.0862664687972017, 0.0 },
  };
  for (int i = 0; i < grad3_size; i++) {
    grad3[i].dx /= N3;
    grad3[i].dy /= N3;
    grad3[i].dz /= N3;
  }
  for (int i = 0; i < PSIZE; i++) {
    GRADIENTS_3D[i] = grad3[i % grad3_size];
  }

  static const int grad4_size = 160;
  Grad4 grad4[grad4_size] {
    { -0.753341017856078, -0.37968289875261624, -0.37968289875261624, -0.37968289875261624 },
    { -0.7821684431180708, -0.4321472685365301, -0.4321472685365301, 0.12128480194602098 },
    { -0.7821684431180708, -0.4321472685365301, 0.12128480194602098, -0.4321472685365301 },
    { -0.7821684431180708, 0.12128480194602098, -0.4321472685365301, -0.4321472685365301 },
    { -0.8586508742123365, -0.508629699630796, 0.044802370851755174, 0.044802370851755174 },
    { -0.8586508742123365, 0.044802370851755174, -0.508629699630796, 0.044802370851755174 },
    { -0.8586508742123365, 0.044802370851755174, 0.044802370851755174, -0.508629699630796 },
    { -0.9982828964265062, -0.03381941603233842, -0.03381941603233842, -0.03381941603233842 },
    { -0.37968289875261624, -0.753341017856078, -0.37968289875261624, -0.37968289875261624 },
    { -0.4321472685365301, -0.7821684431180708, -0.4321472685365301, 0.12128480194602098 },
    { -0.4321472685365301, -0.7821684431180708, 0.12128480194602098, -0.4321472685365301 },
    { 0.12128480194602098, -0.7821684431180708, -0.4321472685365301, -0.4321472685365301 },
    { -0.508629699630796, -0.8586508742123365, 0.044802370851755174, 0.044802370851755174 },
    { 0.044802370851755174, -0.8586508742123365, -0.508629699630796, 0.044802370851755174 },
    { 0.044802370851755174, -0.8586508742123365, 0.044802370851755174, -0.508629699630796 },
    { -0.03381941603233842, -0.9982828964265062, -0.03381941603233842, -0.03381941603233842 },
    { -0.37968289875261624, -0.37968289875261624, -0.753341017856078, -0.37968289875261624 },
    { -0.4321472685365301, -0.4321472685365301, -0.7821684431180708, 0.12128480194602098 },
    { -0.4321472685365301, 0.12128480194602098, -0.7821684431180708, -0.4321472685365301 },
    { 0.12128480194602098, -0.4321472685365301, -0.7821684431180708, -0.4321472685365301 },
    { -0.508629699630796, 0.044802370851755174, -0.8586508742123365, 0.044802370851755174 },
    { 0.044802370851755174, -0.508629699630796, -0.8586508742123365, 0.044802370851755174 },
    { 0.044802370851755174, 0.044802370851755174, -0.8586508742123365, -0.508629699630796 },
    { -0.03381941603233842, -0.03381941603233842, -0.9982828964265062, -0.03381941603233842 },
    { -0.37968289875261624, -0.37968289875261624, -0.37968289875261624, -0.753341017856078 },
    { -0.4321472685365301, -0.4321472685365301, 0.12128480194602098, -0.7821684431180708 },
    { -0.4321472685365301, 0.12128480194602098, -0.4321472685365301, -0.7821684431180708 },
    { 0.12128480194602098, -0.4321472685365301, -0.4321472685365301, -0.7821684431180708 },
    { -0.508629699630796, 0.044802370851755174, 0.044802370851755174, -0.8586508742123365 },
    { 0.044802370851755174, -0.508629699630796, 0.044802370851755174, -0.8586508742123365 },
    { 0.044802370851755174, 0.044802370851755174, -0.508629699630796, -0.8586508742123365 },
    { -0.03381941603233842, -0.03381941603233842, -0.03381941603233842, -0.9982828964265062 },
    { -0.6740059517812944, -0.3239847771997537, -0.3239847771997537, 0.5794684678643381 },
    { -0.7504883828755602, -0.4004672082940195, 0.15296486218853164, 0.5029860367700724 },
    { -0.7504883828755602, 0.15296486218853164, -0.4004672082940195, 0.5029860367700724 },
    { -0.8828161875373585, 0.08164729285680945, 0.08164729285680945, 0.4553054119602712 },
    { -0.4553054119602712, -0.08164729285680945, -0.08164729285680945, 0.8828161875373585 },
    { -0.5029860367700724, -0.15296486218853164, 0.4004672082940195, 0.7504883828755602 },
    { -0.5029860367700724, 0.4004672082940195, -0.15296486218853164, 0.7504883828755602 },
    { -0.5794684678643381, 0.3239847771997537, 0.3239847771997537, 0.6740059517812944 },
    { -0.3239847771997537, -0.6740059517812944, -0.3239847771997537, 0.5794684678643381 },
    { -0.4004672082940195, -0.7504883828755602, 0.15296486218853164, 0.5029860367700724 },
    { 0.15296486218853164, -0.7504883828755602, -0.4004672082940195, 0.5029860367700724 },
    { 0.08164729285680945, -0.8828161875373585, 0.08164729285680945, 0.4553054119602712 },
    { -0.08164729285680945, -0.4553054119602712, -0.08164729285680945, 0.8828161875373585 },
    { -0.15296486218853164, -0.5029860367700724, 0.4004672082940195, 0.7504883828755602 },
    { 0.4004672082940195, -0.5029860367700724, -0.15296486218853164, 0.7504883828755602 },
    { 0.3239847771997537, -0.5794684678643381, 0.3239847771997537, 0.6740059517812944 },
    { -0.3239847771997537, -0.3239847771997537, -0.6740059517812944, 0.5794684678643381 },
    { -0.4004672082940195, 0.15296486218853164, -0.7504883828755602, 0.5029860367700724 },
    { 0.15296486218853164, -0.4004672082940195, -0.7504883828755602, 0.5029860367700724 },
    { 0.08164729285680945, 0.08164729285680945, -0.8828161875373585, 0.4553054119602712 },
    { -0.08164729285680945, -0.08164729285680945, -0.4553054119602712, 0.8828161875373585 },
    { -0.15296486218853164, 0.4004672082940195, -0.5029860367700724, 0.7504883828755602 },
    { 0.4004672082940195, -0.15296486218853164, -0.5029860367700724, 0.7504883828755602 },
    { 0.3239847771997537, 0.3239847771997537, -0.5794684678643381, 0.6740059517812944 },
    { -0.6740059517812944, -0.3239847771997537, 0.5794684678643381, -0.3239847771997537 },
    { -0.7504883828755602, -0.4004672082940195, 0.5029860367700724, 0.15296486218853164 },
    { -0.7504883828755602, 0.15296486218853164, 0.5029860367700724, -0.4004672082940195 },
    { -0.8828161875373585, 0.08164729285680945, 0.4553054119602712, 0.08164729285680945 },
    { -0.4553054119602712, -0.08164729285680945, 0.8828161875373585, -0.08164729285680945 },
    { -0.5029860367700724, -0.15296486218853164, 0.7504883828755602, 0.4004672082940195 },
    { -0.5029860367700724, 0.4004672082940195, 0.7504883828755602, -0.15296486218853164 },
    { -0.5794684678643381, 0.3239847771997537, 0.6740059517812944, 0.3239847771997537 },
    { -0.3239847771997537, -0.6740059517812944, 0.5794684678643381, -0.3239847771997537 },
    { -0.4004672082940195, -0.7504883828755602, 0.5029860367700724, 0.15296486218853164 },
    { 0.15296486218853164, -0.7504883828755602, 0.5029860367700724, -0.4004672082940195 },
    { 0.08164729285680945, -0.8828161875373585, 0.4553054119602712, 0.08164729285680945 },
    { -0.08164729285680945, -0.4553054119602712, 0.8828161875373585, -0.08164729285680945 },
    { -0.15296486218853164, -0.5029860367700724, 0.7504883828755602, 0.4004672082940195 },
    { 0.4004672082940195, -0.5029860367700724, 0.7504883828755602, -0.15296486218853164 },
    { 0.3239847771997537, -0.5794684678643381, 0.6740059517812944, 0.3239847771997537 },
    { -0.3239847771997537, -0.3239847771997537, 0.5794684678643381, -0.6740059517812944 },
    { -0.4004672082940195, 0.15296486218853164, 0.5029860367700724, -0.7504883828755602 },
    { 0.15296486218853164, -0.4004672082940195, 0.5029860367700724, -0.7504883828755602 },
    { 0.08164729285680945, 0.08164729285680945, 0.4553054119602712, -0.8828161875373585 },
    { -0.08164729285680945, -0.08164729285680945, 0.8828161875373585, -0.4553054119602712 },
    { -0.15296486218853164, 0.4004672082940195, 0.7504883828755602, -0.5029860367700724 },
    { 0.4004672082940195, -0.15296486218853164, 0.7504883828755602, -0.5029860367700724 },
    { 0.3239847771997537, 0.3239847771997537, 0.6740059517812944, -0.5794684678643381 },
    { -0.6740059517812944, 0.5794684678643381, -0.3239847771997537, -0.3239847771997537 },
    { -0.7504883828755602, 0.5029860367700724, -0.4004672082940195, 0.15296486218853164 },
    { -0.7504883828755602, 0.5029860367700724, 0.15296486218853164, -0.4004672082940195 },
    { -0.8828161875373585, 0.4553054119602712, 0.08164729285680945, 0.08164729285680945 },
    { -0.4553054119602712, 0.8828161875373585, -0.08164729285680945, -0.08164729285680945 },
    { -0.5029860367700724, 0.7504883828755602, -0.15296486218853164, 0.4004672082940195 },
    { -0.5029860367700724, 0.7504883828755602, 0.4004672082940195, -0.15296486218853164 },
    { -0.5794684678643381, 0.6740059517812944, 0.3239847771997537, 0.3239847771997537 },
    { -0.3239847771997537, 0.5794684678643381, -0.6740059517812944, -0.3239847771997537 },
    { -0.4004672082940195, 0.5029860367700724, -0.7504883828755602, 0.15296486218853164 },
    { 0.15296486218853164, 0.5029860367700724, -0.7504883828755602, -0.4004672082940195 },
    { 0.08164729285680945, 0.4553054119602712, -0.8828161875373585, 0.08164729285680945 },
    { -0.08164729285680945, 0.8828161875373585, -0.4553054119602712, -0.08164729285680945 },
    { -0.15296486218853164, 0.7504883828755602, -0.5029860367700724, 0.4004672082940195 },
    { 0.4004672082940195, 0.7504883828755602, -0.5029860367700724, -0.15296486218853164 },
    { 0.3239847771997537, 0.6740059517812944, -0.5794684678643381, 0.3239847771997537 },
    { -0.3239847771997537, 0.5794684678643381, -0.3239847771997537, -0.6740059517812944 },
    { -0.4004672082940195, 0.5029860367700724, 0.15296486218853164, -0.7504883828755602 },
    { 0.15296486218853164, 0.5029860367700724, -0.4004672082940195, -0.7504883828755602 },
    { 0.08164729285680945, 0.4553054119602712, 0.08164729285680945, -0.8828161875373585 },
    { -0.08164729285680945, 0.8828161875373585, -0.08164729285680945, -0.4553054119602712 },
    { -0.15296486218853164, 0.7504883828755602, 0.4004672082940195, -0.5029860367700724 },
    { 0.4004672082940195, 0.7504883828755602, -0.15296486218853164, -0.5029860367700724 },
    { 0.3239847771997537, 0.6740059517812944, 0.3239847771997537, -0.5794684678643381 },
    { 0.5794684678643381, -0.6740059517812944, -0.3239847771997537, -0.3239847771997537 },
    { 0.5029860367700724, -0.7504883828755602, -0.4004672082940195, 0.15296486218853164 },
    { 0.5029860367700724, -0.7504883828755602, 0.15296486218853164, -0.4004672082940195 },
    { 0.4553054119602712, -0.8828161875373585, 0.08164729285680945, 0.08164729285680945 },
    { 0.8828161875373585, -0.4553054119602712, -0.08164729285680945, -0.08164729285680945 },
    { 0.7504883828755602, -0.5029860367700724, -0.15296486218853164, 0.4004672082940195 },
    { 0.7504883828755602, -0.5029860367700724, 0.4004672082940195, -0.15296486218853164 },
    { 0.6740059517812944, -0.5794684678643381, 0.3239847771997537, 0.3239847771997537 },
    { 0.5794684678643381, -0.3239847771997537, -0.6740059517812944, -0.3239847771997537 },
    { 0.5029860367700724, -0.4004672082940195, -0.7504883828755602, 0.15296486218853164 },
    { 0.5029860367700724, 0.15296486218853164, -0.7504883828755602, -0.4004672082940195 },
    { 0.4553054119602712, 0.08164729285680945, -0.8828161875373585, 0.08164729285680945 },
    { 0.8828161875373585, -0.08164729285680945, -0.4553054119602712, -0.08164729285680945 },
    { 0.7504883828755602, -0.15296486218853164, -0.5029860367700724, 0.4004672082940195 },
    { 0.7504883828755602, 0.4004672082940195, -0.5029860367700724, -0.15296486218853164 },
    { 0.6740059517812944, 0.3239847771997537, -0.5794684678643381, 0.3239847771997537 },
    { 0.5794684678643381, -0.3239847771997537, -0.3239847771997537, -0.6740059517812944 },
    { 0.5029860367700724, -0.4004672082940195, 0.15296486218853164, -0.7504883828755602 },
    { 0.5029860367700724, 0.15296486218853164, -0.4004672082940195, -0.7504883828755602 },
    { 0.4553054119602712, 0.08164729285680945, 0.08164729285680945, -0.8828161875373585 },
    { 0.8828161875373585, -0.08164729285680945, -0.08164729285680945, -0.4553054119602712 },
    { 0.7504883828755602, -0.15296486218853164, 0.4004672082940195, -0.5029860367700724 },
    { 0.7504883828755602, 0.4004672082940195, -0.15296486218853164, -0.5029860367700724 },
    { 0.6740059517812944, 0.3239847771997537, 0.3239847771997537, -0.5794684678643381 },
    { 0.03381941603233842, 0.03381941603233842, 0.03381941603233842, 0.9982828964265062 },
    { -0.044802370851755174, -0.044802370851755174, 0.508629699630796, 0.8586508742123365 },
    { -0.044802370851755174, 0.508629699630796, -0.044802370851755174, 0.8586508742123365 },
    { -0.12128480194602098, 0.4321472685365301, 0.4321472685365301, 0.7821684431180708 },
    { 0.508629699630796, -0.044802370851755174, -0.044802370851755174, 0.8586508742123365 },
    { 0.4321472685365301, -0.12128480194602098, 0.4321472685365301, 0.7821684431180708 },
    { 0.4321472685365301, 0.4321472685365301, -0.12128480194602098, 0.7821684431180708 },
    { 0.37968289875261624, 0.37968289875261624, 0.37968289875261624, 0.753341017856078 },
    { 0.03381941603233842, 0.03381941603233842, 0.9982828964265062, 0.03381941603233842 },
    { -0.044802370851755174, 0.044802370851755174, 0.8586508742123365, 0.508629699630796 },
    { -0.044802370851755174, 0.508629699630796, 0.8586508742123365, -0.044802370851755174 },
    { -0.12128480194602098, 0.4321472685365301, 0.7821684431180708, 0.4321472685365301 },
    { 0.508629699630796, -0.044802370851755174, 0.8586508742123365, -0.044802370851755174 },
    { 0.4321472685365301, -0.12128480194602098, 0.7821684431180708, 0.4321472685365301 },
    { 0.4321472685365301, 0.4321472685365301, 0.7821684431180708, -0.12128480194602098 },
    { 0.37968289875261624, 0.37968289875261624, 0.753341017856078, 0.37968289875261624 },
    { 0.03381941603233842, 0.9982828964265062, 0.03381941603233842, 0.03381941603233842 },
    { -0.044802370851755174, 0.8586508742123365, -0.044802370851755174, 0.508629699630796 },
    { -0.044802370851755174, 0.8586508742123365, 0.508629699630796, -0.044802370851755174 },
    { -0.12128480194602098, 0.7821684431180708, 0.4321472685365301, 0.4321472685365301 },
    { 0.508629699630796, 0.8586508742123365, -0.044802370851755174, -0.044802370851755174 },
    { 0.4321472685365301, 0.7821684431180708, -0.12128480194602098, 0.4321472685365301 },
    { 0.4321472685365301, 0.7821684431180708, 0.4321472685365301, -0.12128480194602098 },
    { 0.37968289875261624, 0.753341017856078, 0.37968289875261624, 0.37968289875261624 },
    { 0.9982828964265062, 0.03381941603233842, 0.03381941603233842, 0.03381941603233842 },
    { 0.8586508742123365, -0.044802370851755174, -0.044802370851755174, 0.508629699630796 },
    { 0.8586508742123365, -0.044802370851755174, 0.508629699630796, -0.044802370851755174 },
    { 0.7821684431180708, -0.12128480194602098, 0.4321472685365301, 0.4321472685365301 },
    { 0.8586508742123365, 0.508629699630796, -0.044802370851755174, -0.044802370851755174 },
    { 0.7821684431180708, 0.4321472685365301, -0.12128480194602098, 0.4321472685365301 },
    { 0.7821684431180708, 0.4321472685365301, 0.4321472685365301, -0.12128480194602098 },
    { 0.753341017856078, 0.37968289875261624, 0.37968289875261624, 0.37968289875261624 },
  };
  for (int i = 0; i < grad4_size; i++) {
    grad4[i].dx /= N4;
    grad4[i].dy /= N4;
    grad4[i].dz /= N4;
    grad4[i].dw /= N4;
  }
  for (int i = 0; i < PSIZE; i++) {
    GRADIENTS_4D[i] = grad4[i % grad4_size];
  }
}
