Index: cell_based/src/simulation/OffLatticeSimulation.cpp
===================================================================
--- cell_based/src/simulation/OffLatticeSimulation.cpp	(revision 25917)
+++ cell_based/src/simulation/OffLatticeSimulation.cpp	(working copy)
@@ -77,7 +77,7 @@
         // All classes derived from AbstractOffLatticeCellPopulation are covered by the above (except user-derived classes),
         // i.e. if you want to use this method with your own subclass of AbstractOffLatticeCellPopulation, then simply
         // comment out the line below
-        NEVER_REACHED;
+//        NEVER_REACHED;
     }
 }
 
@@ -223,7 +223,7 @@
         // All classes derived from AbstractOffLatticeCellPopulation are covered by the above (except user-derived classes),
         // i.e. if you want to use this class with your own subclass of AbstractOffLatticeCellPopulation, then simply
         // comment out the line below
-        NEVER_REACHED;
+//        NEVER_REACHED;
     }
 }
 
Index: mesh/src/utilities/BoxCollection.cpp
===================================================================
--- mesh/src/utilities/BoxCollection.cpp	(revision 25913)
+++ mesh/src/utilities/BoxCollection.cpp	(working copy)
@@ -683,7 +683,7 @@
                                             std::map<unsigned, std::set<unsigned> >& rNodeNeighbours)
 {
     rNodePairs.clear();
-    rNodeNeighbours.clear();
+//    rNodeNeighbours.clear();
 
     // Ensure all boxes are empty
     EmptyBoxes();
@@ -691,7 +691,7 @@
     // Create an empty set of neighbours for each node, and add each node to its correct box
     for (unsigned node_index = 0; node_index < rNodes.size(); node_index++)
     {
-        rNodeNeighbours[node_index] = std::set<unsigned>();
+//        rNodeNeighbours[node_index] = std::set<unsigned>();
 
         unsigned box_index = CalculateContainingBox(rNodes[node_index]);
         mBoxes[box_index].AddNode(rNodes[node_index]);
@@ -700,7 +700,7 @@
     for (unsigned i = 0; i < rNodes.size(); i++)
     {
         Node<DIM>* this_node = rNodes[i];
-        unsigned node_index = this_node->GetIndex();
+//        unsigned node_index = this_node->GetIndex();
 
         // Get the box containing this node
         unsigned this_node_box_index = CalculateContainingBox(this_node);
@@ -728,15 +728,15 @@
                     if (other_node_index > this_node->GetIndex())
                     {
                         rNodePairs.push_back(std::pair<Node<DIM>*, Node<DIM>*>(this_node, (*node_iter)));
-                        rNodeNeighbours[node_index].insert(other_node_index);
-                        rNodeNeighbours[other_node_index].insert(node_index);
+//                        rNodeNeighbours[node_index].insert(other_node_index);
+//                        rNodeNeighbours[other_node_index].insert(node_index);
                     }
                 }
                 else
                 {
                     rNodePairs.push_back(std::pair<Node<DIM>*, Node<DIM>*>(this_node, (*node_iter)));
-                    rNodeNeighbours[node_index].insert(other_node_index);
-                    rNodeNeighbours[other_node_index].insert(node_index);
+//                    rNodeNeighbours[node_index].insert(other_node_index);
+//                    rNodeNeighbours[other_node_index].insert(node_index);
                 }
             }
         }
