//! @file
//! 
//! This source file was generated from CellML.
//! 
//! Model: luo_rudy_1991
//! 
//! Processed by pycml - CellML Tools in Python
//!     (translators: , pycml: , optimize: )
//! on Wed May 17 14:46:26 2017
//! 
//! <autogenerated>

#include "LuoRudy1991RushLarsen.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"

    boost::shared_ptr<RegularStimulus> CellLuoRudy1991FromCellMLRushLarsen::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        const double var_chaste_interface__membrane__stim_start = 100.0; // millisecond
        const double var_chaste_interface__membrane__stim_period = 1000.0; // millisecond
        const double var_chaste_interface__membrane__stim_duration = 2.0; // millisecond
        const double var_membrane__stim_amplitude =  -25.5; // microA_per_cm2
        const double var_chaste_interface__membrane__stim_amplitude = var_membrane__stim_amplitude; // uA_per_cm2
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__membrane__stim_amplitude),
                var_chaste_interface__membrane__stim_duration,
                var_chaste_interface__membrane__stim_period,
                var_chaste_interface__membrane__stim_start
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }
    
    double CellLuoRudy1991FromCellMLRushLarsen::GetIntracellularCalciumConcentration()
    {
        return mStateVariables[7];
    }
    
    CellLuoRudy1991FromCellMLRushLarsen::CellLuoRudy1991FromCellMLRushLarsen(boost::shared_ptr<AbstractIvpOdeSolver> /* unused; should be empty */, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractRushLarsenCardiacCell(
                8,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        // 
        this->mpSystemInfo = OdeSystemInformation<CellLuoRudy1991FromCellMLRushLarsen>::Instance();
        Init();

        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
        this->mParameters[0] = 0.09; // (slow_inward_current,P_si) [milliS_per_cm2]
        this->mParameters[1] = 23; // (fast_sodium_current,g_Na) [milliS_per_cm2]
        this->mParameters[2] = 0.282; // (time_dependent_potassium_current,g_Kmax) [milliS_per_cm2]
    }
    
    CellLuoRudy1991FromCellMLRushLarsen::~CellLuoRudy1991FromCellMLRushLarsen()
    {
    }
    
    void CellLuoRudy1991FromCellMLRushLarsen::VerifyStateVariables()
    {
        std::vector<double>& rY = rGetStateVariables();
        double var_chaste_interface__fast_sodium_current_m_gate__m = rY[1];
        // Units: dimensionless; Initial value: 0.00187018
        
        if (var_chaste_interface__fast_sodium_current_m_gate__m < 0)
        {
            EXCEPTION(DumpState("State variable fast_sodium_current_m_gate__m has gone out of range. Check numerical parameters, for example time and space stepsizes, and/or solver tolerances"));
        }
        if (var_chaste_interface__fast_sodium_current_m_gate__m > 1)
        {
            EXCEPTION(DumpState("State variable fast_sodium_current_m_gate__m has gone out of range. Check numerical parameters, for example time and space stepsizes, and/or solver tolerances"));
        }
    }
    
    double CellLuoRudy1991FromCellMLRushLarsen::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        if (!pStateVariables) pStateVariables = &rGetStateVariables();
        const std::vector<double>& rY = *pStateVariables;
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -83.853
        double var_chaste_interface__fast_sodium_current_m_gate__m = rY[1];
        // Units: dimensionless; Initial value: 0.00187018
        double var_chaste_interface__fast_sodium_current_h_gate__h = rY[2];
        // Units: dimensionless; Initial value: 0.9804713
        double var_chaste_interface__fast_sodium_current_j_gate__j = rY[3];
        // Units: dimensionless; Initial value: 0.98767124
        double var_chaste_interface__slow_inward_current_d_gate__d = rY[4];
        // Units: dimensionless; Initial value: 0.00316354
        double var_chaste_interface__slow_inward_current_f_gate__f = rY[5];
        // Units: dimensionless; Initial value: 0.99427859
        double var_chaste_interface__time_dependent_potassium_current_X_gate__X = rY[6];
        // Units: dimensionless; Initial value: 0.16647703
        double var_chaste_interface__intracellular_calcium_concentration__Cai = rY[7];
        // Units: millimolar; Initial value: 0.0002
        
        const double var_membrane__R = 8314.0; // joule_per_kilomole_kelvin
        const double var_membrane__T = 310.0; // kelvin
        const double var_membrane__F = 96484.600000000006; // coulomb_per_mole
        const double var_time_dependent_potassium_current__V = var_chaste_interface__membrane__V; // millivolt
        const double var_time_dependent_potassium_current_Xi_gate__V = var_time_dependent_potassium_current__V; // millivolt
        const double var_time_dependent_potassium_current_Xi_gate__Xi = (var_time_dependent_potassium_current_Xi_gate__V > (-100.0)) ? ((2.8370000000000002 * (exp(0.040000000000000001 * (var_time_dependent_potassium_current_Xi_gate__V + 77.0)) - 1.0)) / ((var_time_dependent_potassium_current_Xi_gate__V + 77.0) * exp(0.040000000000000001 * (var_time_dependent_potassium_current_Xi_gate__V + 35.0)))) : 1.0; // dimensionless
        const double var_time_dependent_potassium_current__Xi = var_time_dependent_potassium_current_Xi_gate__Xi; // dimensionless
        const double var_ionic_concentrations__Ko = 5.4000000000000004; // millimolar
        const double var_time_dependent_potassium_current__Ko = var_ionic_concentrations__Ko; // millimolar
        const double var_time_dependent_potassium_current__g_K = mParameters[2] * sqrt(var_time_dependent_potassium_current__Ko / 5.4000000000000004); // milliS_per_cm2
        const double var_time_dependent_potassium_current__X = var_chaste_interface__time_dependent_potassium_current_X_gate__X; // dimensionless
        const double var_time_dependent_potassium_current__PR_NaK = 0.018329999999999999; // dimensionless
        const double var_time_dependent_potassium_current__F = var_membrane__F; // coulomb_per_mole
        const double var_ionic_concentrations__Nao = 140.0; // millimolar
        const double var_time_dependent_potassium_current__Nao = var_ionic_concentrations__Nao; // millimolar
        const double var_ionic_concentrations__Ki = 145.0; // millimolar
        const double var_time_dependent_potassium_current__Ki = var_ionic_concentrations__Ki; // millimolar
        const double var_ionic_concentrations__Nai = 18.0; // millimolar
        const double var_time_dependent_potassium_current__Nai = var_ionic_concentrations__Nai; // millimolar
        const double var_time_dependent_potassium_current__T = var_membrane__T; // kelvin
        const double var_time_dependent_potassium_current__R = var_membrane__R; // joule_per_kilomole_kelvin
        const double var_time_dependent_potassium_current__E_K = ((var_time_dependent_potassium_current__R * var_time_dependent_potassium_current__T) / var_time_dependent_potassium_current__F) * log((var_time_dependent_potassium_current__Ko + (var_time_dependent_potassium_current__PR_NaK * var_time_dependent_potassium_current__Nao)) / (var_time_dependent_potassium_current__Ki + (var_time_dependent_potassium_current__PR_NaK * var_time_dependent_potassium_current__Nai))); // millivolt
        const double var_time_dependent_potassium_current__i_K = var_time_dependent_potassium_current__g_K * var_time_dependent_potassium_current__X * var_time_dependent_potassium_current__Xi * (var_time_dependent_potassium_current__V - var_time_dependent_potassium_current__E_K); // microA_per_cm2
        const double var_plateau_potassium_current__g_Kp = 0.0183; // milliS_per_cm2
        const double var_plateau_potassium_current__V = var_chaste_interface__membrane__V; // millivolt
        const double var_plateau_potassium_current__Kp = 1.0 / (1.0 + exp((7.4880000000000004 - var_plateau_potassium_current__V) / 5.9800000000000004)); // dimensionless
        const double var_time_independent_potassium_current__Ki = var_ionic_concentrations__Ki; // millimolar
        const double var_time_independent_potassium_current__R = var_membrane__R; // joule_per_kilomole_kelvin
        const double var_time_independent_potassium_current__F = var_membrane__F; // coulomb_per_mole
        const double var_time_independent_potassium_current__Ko = var_ionic_concentrations__Ko; // millimolar
        const double var_time_independent_potassium_current__T = var_membrane__T; // kelvin
        const double var_time_independent_potassium_current__E_K1 = ((var_time_independent_potassium_current__R * var_time_independent_potassium_current__T) / var_time_independent_potassium_current__F) * log(var_time_independent_potassium_current__Ko / var_time_independent_potassium_current__Ki); // millivolt
        const double var_plateau_potassium_current__E_K1 = var_time_independent_potassium_current__E_K1; // millivolt
        const double var_plateau_potassium_current__E_Kp = var_plateau_potassium_current__E_K1; // millivolt
        const double var_plateau_potassium_current__i_Kp = var_plateau_potassium_current__g_Kp * var_plateau_potassium_current__Kp * (var_plateau_potassium_current__V - var_plateau_potassium_current__E_Kp); // microA_per_cm2
        const double var_time_independent_potassium_current__V = var_chaste_interface__membrane__V; // millivolt
        const double var_time_independent_potassium_current_K1_gate__V = var_time_independent_potassium_current__V; // millivolt
        const double var_time_independent_potassium_current_K1_gate__E_K1 = var_time_independent_potassium_current__E_K1; // millivolt
        const double var_time_independent_potassium_current_K1_gate__beta_K1 = ((0.49124000000000001 * exp(0.080320000000000003 * ((var_time_independent_potassium_current_K1_gate__V + 5.476) - var_time_independent_potassium_current_K1_gate__E_K1))) + (1.0 * exp(0.061749999999999999 * (var_time_independent_potassium_current_K1_gate__V - (var_time_independent_potassium_current_K1_gate__E_K1 + 594.30999999999995))))) / (1.0 + exp((-0.51429999999999998) * ((var_time_independent_potassium_current_K1_gate__V - var_time_independent_potassium_current_K1_gate__E_K1) + 4.7530000000000001))); // per_millisecond
        const double var_time_independent_potassium_current_K1_gate__alpha_K1 = 1.02 / (1.0 + exp(0.23849999999999999 * ((var_time_independent_potassium_current_K1_gate__V - var_time_independent_potassium_current_K1_gate__E_K1) - 59.215000000000003))); // per_millisecond
        const double var_time_independent_potassium_current_K1_gate__K1_infinity = var_time_independent_potassium_current_K1_gate__alpha_K1 / (var_time_independent_potassium_current_K1_gate__alpha_K1 + var_time_independent_potassium_current_K1_gate__beta_K1); // dimensionless
        const double var_time_independent_potassium_current__K1_infinity = var_time_independent_potassium_current_K1_gate__K1_infinity; // dimensionless
        const double var_time_independent_potassium_current__g_K1 = 0.60470000000000002 * sqrt(var_time_independent_potassium_current__Ko / 5.4000000000000004); // milliS_per_cm2
        const double var_time_independent_potassium_current__i_K1 = var_time_independent_potassium_current__g_K1 * var_time_independent_potassium_current__K1_infinity * (var_time_independent_potassium_current__V - var_time_independent_potassium_current__E_K1); // microA_per_cm2
        const double var_fast_sodium_current__j = var_chaste_interface__fast_sodium_current_j_gate__j; // dimensionless
        const double var_fast_sodium_current__h = var_chaste_interface__fast_sodium_current_h_gate__h; // dimensionless
        const double var_fast_sodium_current__m = var_chaste_interface__fast_sodium_current_m_gate__m; // dimensionless
        const double var_fast_sodium_current__V = var_chaste_interface__membrane__V; // millivolt
        const double var_fast_sodium_current__R = var_membrane__R; // joule_per_kilomole_kelvin
        const double var_fast_sodium_current__F = var_membrane__F; // coulomb_per_mole
        const double var_fast_sodium_current__Nao = var_ionic_concentrations__Nao; // millimolar
        const double var_fast_sodium_current__Nai = var_ionic_concentrations__Nai; // millimolar
        const double var_fast_sodium_current__T = var_membrane__T; // kelvin
        const double var_fast_sodium_current__E_Na = ((var_fast_sodium_current__R * var_fast_sodium_current__T) / var_fast_sodium_current__F) * log(var_fast_sodium_current__Nao / var_fast_sodium_current__Nai); // millivolt
        const double var_fast_sodium_current__i_Na = mParameters[1] * pow(var_fast_sodium_current__m, 3.0) * var_fast_sodium_current__h * var_fast_sodium_current__j * (var_fast_sodium_current__V - var_fast_sodium_current__E_Na); // microA_per_cm2
        const double var_slow_inward_current__d = var_chaste_interface__slow_inward_current_d_gate__d; // dimensionless
        const double var_slow_inward_current__Cai = var_chaste_interface__intracellular_calcium_concentration__Cai; // millimolar
        const double var_slow_inward_current__E_si = 7.7000000000000002 - (13.028700000000001 * log(var_slow_inward_current__Cai / 1.0)); // millivolt
        const double var_slow_inward_current__f = var_chaste_interface__slow_inward_current_f_gate__f; // dimensionless
        const double var_slow_inward_current__V = var_chaste_interface__membrane__V; // millivolt
        const double var_slow_inward_current__i_si = mParameters[0] * var_slow_inward_current__d * var_slow_inward_current__f * (var_slow_inward_current__V - var_slow_inward_current__E_si); // microA_per_cm2
        const double var_background_current__E_b =  -59.869999999999997; // millivolt
        const double var_background_current__g_b = 0.039210000000000002; // milliS_per_cm2
        const double var_background_current__V = var_chaste_interface__membrane__V; // millivolt
        const double var_background_current__i_b = var_background_current__g_b * (var_background_current__V - var_background_current__E_b); // microA_per_cm2
        const double var_chaste_interface__time_dependent_potassium_current__i_K = var_time_dependent_potassium_current__i_K; // microA_per_cm2
        const double var_chaste_interface__time_independent_potassium_current__i_K1 = var_time_independent_potassium_current__i_K1; // microA_per_cm2
        const double var_chaste_interface__fast_sodium_current__i_Na = var_fast_sodium_current__i_Na; // microA_per_cm2
        const double var_chaste_interface__slow_inward_current__i_si = var_slow_inward_current__i_si; // microA_per_cm2
        const double var_chaste_interface__plateau_potassium_current__i_Kp = var_plateau_potassium_current__i_Kp; // microA_per_cm2
        const double var_chaste_interface__background_current__i_b = var_background_current__i_b; // microA_per_cm2
        const double var_chaste_interface__i_ionic = var_chaste_interface__fast_sodium_current__i_Na + var_chaste_interface__slow_inward_current__i_si + var_chaste_interface__time_dependent_potassium_current__i_K + var_chaste_interface__time_independent_potassium_current__i_K1 + var_chaste_interface__plateau_potassium_current__i_Kp + var_chaste_interface__background_current__i_b; // uA_per_cm2
        
        const double i_ionic = var_chaste_interface__i_ionic;
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }
    
    void CellLuoRudy1991FromCellMLRushLarsen::EvaluateEquations(double var_chaste_interface__environment__time, std::vector<double> &rDY, std::vector<double> &rAlphaOrTau, std::vector<double> &rBetaOrInf)
    {
        std::vector<double>& rY = rGetStateVariables();
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -83.853
        double var_chaste_interface__fast_sodium_current_m_gate__m = rY[1];
        // Units: dimensionless; Initial value: 0.00187018
        double var_chaste_interface__fast_sodium_current_h_gate__h = rY[2];
        // Units: dimensionless; Initial value: 0.9804713
        double var_chaste_interface__fast_sodium_current_j_gate__j = rY[3];
        // Units: dimensionless; Initial value: 0.98767124
        double var_chaste_interface__slow_inward_current_d_gate__d = rY[4];
        // Units: dimensionless; Initial value: 0.00316354
        double var_chaste_interface__slow_inward_current_f_gate__f = rY[5];
        // Units: dimensionless; Initial value: 0.99427859
        double var_chaste_interface__time_dependent_potassium_current_X_gate__X = rY[6];
        // Units: dimensionless; Initial value: 0.16647703
        double var_chaste_interface__intracellular_calcium_concentration__Cai = rY[7];
        // Units: millimolar; Initial value: 0.0002
        
        
        // Mathematics
        double d_dt_chaste_interface__membrane__V;
        const double var_time_dependent_potassium_current__V = var_chaste_interface__membrane__V; // millivolt
        const double var_fast_sodium_current__V = var_chaste_interface__membrane__V; // millivolt
        const double var_slow_inward_current__d = var_chaste_interface__slow_inward_current_d_gate__d; // dimensionless
        const double var_slow_inward_current__Cai = var_chaste_interface__intracellular_calcium_concentration__Cai; // millimolar
        const double var_slow_inward_current__E_si = 7.7000000000000002 - (13.028700000000001 * log(var_slow_inward_current__Cai / 1.0)); // millivolt
        const double var_slow_inward_current__f = var_chaste_interface__slow_inward_current_f_gate__f; // dimensionless
        const double var_slow_inward_current__V = var_chaste_interface__membrane__V; // millivolt
        const double var_slow_inward_current__i_si = mParameters[0] * var_slow_inward_current__d * var_slow_inward_current__f * (var_slow_inward_current__V - var_slow_inward_current__E_si); // microA_per_cm2
        const double var_fast_sodium_current_m_gate__V = var_fast_sodium_current__V; // millivolt
        const double var_fast_sodium_current_m_gate__alpha_m = (0.32000000000000001 * (var_fast_sodium_current_m_gate__V + 47.130000000000003)) / (1.0 - exp((-0.10000000000000001) * (var_fast_sodium_current_m_gate__V + 47.130000000000003))); // per_millisecond
        const double var_fast_sodium_current_m_gate__beta_m = 0.080000000000000002 * exp((-var_fast_sodium_current_m_gate__V) / 11.0); // per_millisecond
        const double var_fast_sodium_current_h_gate__V = var_fast_sodium_current__V; // millivolt
        const double var_fast_sodium_current_h_gate__beta_h = (var_fast_sodium_current_h_gate__V < (-40.0)) ? ((3.5600000000000001 * exp(0.079000000000000001 * var_fast_sodium_current_h_gate__V)) + (310000.0 * exp(0.34999999999999998 * var_fast_sodium_current_h_gate__V))) : (1.0 / (0.13 * (1.0 + exp((var_fast_sodium_current_h_gate__V + 10.66) / (-11.1))))); // per_millisecond
        const double var_fast_sodium_current_h_gate__alpha_h = (var_fast_sodium_current_h_gate__V < (-40.0)) ? (0.13500000000000001 * exp((80.0 + var_fast_sodium_current_h_gate__V) / (-6.7999999999999998))) : 0.0; // per_millisecond
        const double var_fast_sodium_current_j_gate__V = var_fast_sodium_current__V; // millivolt
        const double var_fast_sodium_current_j_gate__alpha_j = (var_fast_sodium_current_j_gate__V < (-40.0)) ? (((((-127140.0) * exp(0.24440000000000001 * var_fast_sodium_current_j_gate__V)) - (3.4740000000000003e-05 * exp((-0.043909999999999998) * var_fast_sodium_current_j_gate__V))) * (var_fast_sodium_current_j_gate__V + 37.780000000000001)) / (1.0 + exp(0.311 * (var_fast_sodium_current_j_gate__V + 79.230000000000004)))) : 0.0; // per_millisecond
        const double var_fast_sodium_current_j_gate__beta_j = (var_fast_sodium_current_j_gate__V < (-40.0)) ? ((0.1212 * exp((-0.01052) * var_fast_sodium_current_j_gate__V)) / (1.0 + exp((-0.13780000000000001) * (var_fast_sodium_current_j_gate__V + 40.140000000000001)))) : ((0.29999999999999999 * exp((-2.5349999999999999e-07) * var_fast_sodium_current_j_gate__V)) / (1.0 + exp((-0.10000000000000001) * (var_fast_sodium_current_j_gate__V + 32.0)))); // per_millisecond
        const double var_slow_inward_current_d_gate__V = var_slow_inward_current__V; // millivolt
        const double var_slow_inward_current_d_gate__alpha_d = (0.095000000000000001 * exp((-0.01) * (var_slow_inward_current_d_gate__V - 5.0))) / (1.0 + exp((-0.071999999999999995) * (var_slow_inward_current_d_gate__V - 5.0))); // per_millisecond
        const double var_slow_inward_current_d_gate__beta_d = (0.070000000000000007 * exp((-0.017000000000000001) * (var_slow_inward_current_d_gate__V + 44.0))) / (1.0 + exp(0.050000000000000003 * (var_slow_inward_current_d_gate__V + 44.0))); // per_millisecond
        const double var_slow_inward_current_f_gate__V = var_slow_inward_current__V; // millivolt
        const double var_slow_inward_current_f_gate__alpha_f = (0.012 * exp((-0.0080000000000000002) * (var_slow_inward_current_f_gate__V + 28.0))) / (1.0 + exp(0.14999999999999999 * (var_slow_inward_current_f_gate__V + 28.0))); // per_millisecond
        const double var_slow_inward_current_f_gate__beta_f = (0.0064999999999999997 * exp((-0.02) * (var_slow_inward_current_f_gate__V + 30.0))) / (1.0 + exp((-0.20000000000000001) * (var_slow_inward_current_f_gate__V + 30.0))); // per_millisecond
        const double var_time_dependent_potassium_current_X_gate__V = var_time_dependent_potassium_current__V; // millivolt
        const double var_time_dependent_potassium_current_X_gate__beta_X = (0.0012999999999999999 * exp((-0.059999999999999998) * (var_time_dependent_potassium_current_X_gate__V + 20.0))) / (1.0 + exp((-0.040000000000000001) * (var_time_dependent_potassium_current_X_gate__V + 20.0))); // per_millisecond
        const double var_time_dependent_potassium_current_X_gate__alpha_X = (0.00050000000000000001 * exp(0.083000000000000004 * (var_time_dependent_potassium_current_X_gate__V + 50.0))) / (1.0 + exp(0.057000000000000002 * (var_time_dependent_potassium_current_X_gate__V + 50.0))); // per_millisecond
        const double var_intracellular_calcium_concentration__Cai = var_chaste_interface__intracellular_calcium_concentration__Cai; // millimolar
        const double var_intracellular_calcium_concentration__i_si = var_slow_inward_current__i_si; // microA_per_cm2
        const double var_intracellular_calcium_concentration__d_Cai_d_environment__time = (((-0.0001) / 1.0) * var_intracellular_calcium_concentration__i_si) + (0.070000000000000007 * (0.0001 - var_intracellular_calcium_concentration__Cai)); // 'millimole per litre per millisecond'
        const double var_chaste_interface__intracellular_calcium_concentration__d_Cai_d_environment__time = var_intracellular_calcium_concentration__d_Cai_d_environment__time; // ___units_29
        const double d_dt_chaste_interface__intracellular_calcium_concentration__Cai = var_chaste_interface__intracellular_calcium_concentration__d_Cai_d_environment__time; // 'millimole per litre per millisecond'
        
        if (mSetVoltageDerivativeToZero)
        {
            d_dt_chaste_interface__membrane__V = 0.0;
        }
        else
        {
            const double var_membrane__R = 8314.0; // joule_per_kilomole_kelvin
            const double var_membrane__T = 310.0; // kelvin
            const double var_membrane__F = 96484.600000000006; // coulomb_per_mole
            const double var_time_dependent_potassium_current_Xi_gate__V = var_time_dependent_potassium_current__V; // millivolt
            const double var_time_dependent_potassium_current_Xi_gate__Xi = (var_time_dependent_potassium_current_Xi_gate__V > (-100.0)) ? ((2.8370000000000002 * (exp(0.040000000000000001 * (var_time_dependent_potassium_current_Xi_gate__V + 77.0)) - 1.0)) / ((var_time_dependent_potassium_current_Xi_gate__V + 77.0) * exp(0.040000000000000001 * (var_time_dependent_potassium_current_Xi_gate__V + 35.0)))) : 1.0; // dimensionless
            const double var_time_dependent_potassium_current__Xi = var_time_dependent_potassium_current_Xi_gate__Xi; // dimensionless
            const double var_ionic_concentrations__Ko = 5.4000000000000004; // millimolar
            const double var_time_dependent_potassium_current__Ko = var_ionic_concentrations__Ko; // millimolar
            const double var_time_dependent_potassium_current__g_K = mParameters[2] * sqrt(var_time_dependent_potassium_current__Ko / 5.4000000000000004); // milliS_per_cm2
            const double var_time_dependent_potassium_current__X = var_chaste_interface__time_dependent_potassium_current_X_gate__X; // dimensionless
            const double var_time_dependent_potassium_current__PR_NaK = 0.018329999999999999; // dimensionless
            const double var_time_dependent_potassium_current__F = var_membrane__F; // coulomb_per_mole
            const double var_ionic_concentrations__Nao = 140.0; // millimolar
            const double var_time_dependent_potassium_current__Nao = var_ionic_concentrations__Nao; // millimolar
            const double var_ionic_concentrations__Ki = 145.0; // millimolar
            const double var_time_dependent_potassium_current__Ki = var_ionic_concentrations__Ki; // millimolar
            const double var_ionic_concentrations__Nai = 18.0; // millimolar
            const double var_time_dependent_potassium_current__Nai = var_ionic_concentrations__Nai; // millimolar
            const double var_time_dependent_potassium_current__T = var_membrane__T; // kelvin
            const double var_time_dependent_potassium_current__R = var_membrane__R; // joule_per_kilomole_kelvin
            const double var_time_dependent_potassium_current__E_K = ((var_time_dependent_potassium_current__R * var_time_dependent_potassium_current__T) / var_time_dependent_potassium_current__F) * log((var_time_dependent_potassium_current__Ko + (var_time_dependent_potassium_current__PR_NaK * var_time_dependent_potassium_current__Nao)) / (var_time_dependent_potassium_current__Ki + (var_time_dependent_potassium_current__PR_NaK * var_time_dependent_potassium_current__Nai))); // millivolt
            const double var_time_dependent_potassium_current__i_K = var_time_dependent_potassium_current__g_K * var_time_dependent_potassium_current__X * var_time_dependent_potassium_current__Xi * (var_time_dependent_potassium_current__V - var_time_dependent_potassium_current__E_K); // microA_per_cm2
            const double var_membrane__i_K = var_time_dependent_potassium_current__i_K; // microA_per_cm2
            const double var_plateau_potassium_current__g_Kp = 0.0183; // milliS_per_cm2
            const double var_plateau_potassium_current__V = var_chaste_interface__membrane__V; // millivolt
            const double var_plateau_potassium_current__Kp = 1.0 / (1.0 + exp((7.4880000000000004 - var_plateau_potassium_current__V) / 5.9800000000000004)); // dimensionless
            const double var_time_independent_potassium_current__Ki = var_ionic_concentrations__Ki; // millimolar
            const double var_time_independent_potassium_current__R = var_membrane__R; // joule_per_kilomole_kelvin
            const double var_time_independent_potassium_current__F = var_membrane__F; // coulomb_per_mole
            const double var_time_independent_potassium_current__Ko = var_ionic_concentrations__Ko; // millimolar
            const double var_time_independent_potassium_current__T = var_membrane__T; // kelvin
            const double var_time_independent_potassium_current__E_K1 = ((var_time_independent_potassium_current__R * var_time_independent_potassium_current__T) / var_time_independent_potassium_current__F) * log(var_time_independent_potassium_current__Ko / var_time_independent_potassium_current__Ki); // millivolt
            const double var_plateau_potassium_current__E_K1 = var_time_independent_potassium_current__E_K1; // millivolt
            const double var_plateau_potassium_current__E_Kp = var_plateau_potassium_current__E_K1; // millivolt
            const double var_plateau_potassium_current__i_Kp = var_plateau_potassium_current__g_Kp * var_plateau_potassium_current__Kp * (var_plateau_potassium_current__V - var_plateau_potassium_current__E_Kp); // microA_per_cm2
            const double var_membrane__i_Kp = var_plateau_potassium_current__i_Kp; // microA_per_cm2
            const double var_time_independent_potassium_current__V = var_chaste_interface__membrane__V; // millivolt
            const double var_time_independent_potassium_current_K1_gate__V = var_time_independent_potassium_current__V; // millivolt
            const double var_time_independent_potassium_current_K1_gate__E_K1 = var_time_independent_potassium_current__E_K1; // millivolt
            const double var_time_independent_potassium_current_K1_gate__beta_K1 = ((0.49124000000000001 * exp(0.080320000000000003 * ((var_time_independent_potassium_current_K1_gate__V + 5.476) - var_time_independent_potassium_current_K1_gate__E_K1))) + (1.0 * exp(0.061749999999999999 * (var_time_independent_potassium_current_K1_gate__V - (var_time_independent_potassium_current_K1_gate__E_K1 + 594.30999999999995))))) / (1.0 + exp((-0.51429999999999998) * ((var_time_independent_potassium_current_K1_gate__V - var_time_independent_potassium_current_K1_gate__E_K1) + 4.7530000000000001))); // per_millisecond
            const double var_time_independent_potassium_current_K1_gate__alpha_K1 = 1.02 / (1.0 + exp(0.23849999999999999 * ((var_time_independent_potassium_current_K1_gate__V - var_time_independent_potassium_current_K1_gate__E_K1) - 59.215000000000003))); // per_millisecond
            const double var_time_independent_potassium_current_K1_gate__K1_infinity = var_time_independent_potassium_current_K1_gate__alpha_K1 / (var_time_independent_potassium_current_K1_gate__alpha_K1 + var_time_independent_potassium_current_K1_gate__beta_K1); // dimensionless
            const double var_time_independent_potassium_current__K1_infinity = var_time_independent_potassium_current_K1_gate__K1_infinity; // dimensionless
            const double var_time_independent_potassium_current__g_K1 = 0.60470000000000002 * sqrt(var_time_independent_potassium_current__Ko / 5.4000000000000004); // milliS_per_cm2
            const double var_time_independent_potassium_current__i_K1 = var_time_independent_potassium_current__g_K1 * var_time_independent_potassium_current__K1_infinity * (var_time_independent_potassium_current__V - var_time_independent_potassium_current__E_K1); // microA_per_cm2
            const double var_membrane__i_K1 = var_time_independent_potassium_current__i_K1; // microA_per_cm2
            const double var_membrane__C = 1.0; // microF_per_cm2
            const double var_chaste_interface__membrane__I_stim = GetIntracellularAreaStimulus(var_chaste_interface__environment__time);
            const double var_membrane__I_stim = var_chaste_interface__membrane__I_stim; // microA_per_cm2
            const double var_fast_sodium_current__j = var_chaste_interface__fast_sodium_current_j_gate__j; // dimensionless
            const double var_fast_sodium_current__h = var_chaste_interface__fast_sodium_current_h_gate__h; // dimensionless
            const double var_fast_sodium_current__m = var_chaste_interface__fast_sodium_current_m_gate__m; // dimensionless
            const double var_fast_sodium_current__R = var_membrane__R; // joule_per_kilomole_kelvin
            const double var_fast_sodium_current__F = var_membrane__F; // coulomb_per_mole
            const double var_fast_sodium_current__Nao = var_ionic_concentrations__Nao; // millimolar
            const double var_fast_sodium_current__Nai = var_ionic_concentrations__Nai; // millimolar
            const double var_fast_sodium_current__T = var_membrane__T; // kelvin
            const double var_fast_sodium_current__E_Na = ((var_fast_sodium_current__R * var_fast_sodium_current__T) / var_fast_sodium_current__F) * log(var_fast_sodium_current__Nao / var_fast_sodium_current__Nai); // millivolt
            const double var_fast_sodium_current__i_Na = mParameters[1] * pow(var_fast_sodium_current__m, 3.0) * var_fast_sodium_current__h * var_fast_sodium_current__j * (var_fast_sodium_current__V - var_fast_sodium_current__E_Na); // microA_per_cm2
            const double var_membrane__i_Na = var_fast_sodium_current__i_Na; // microA_per_cm2
            const double var_membrane__i_si = var_slow_inward_current__i_si; // microA_per_cm2
            const double var_background_current__E_b =  -59.869999999999997; // millivolt
            const double var_background_current__g_b = 0.039210000000000002; // milliS_per_cm2
            const double var_background_current__V = var_chaste_interface__membrane__V; // millivolt
            const double var_background_current__i_b = var_background_current__g_b * (var_background_current__V - var_background_current__E_b); // microA_per_cm2
            const double var_membrane__i_b = var_background_current__i_b; // microA_per_cm2
            const double var_membrane__d_V_d_environment__time = ((-1.0) / var_membrane__C) * (var_membrane__I_stim + var_membrane__i_Na + var_membrane__i_si + var_membrane__i_K + var_membrane__i_K1 + var_membrane__i_Kp + var_membrane__i_b); // 'millivolt per millisecond'
            const double var_chaste_interface__membrane__d_V_d_environment__time = var_membrane__d_V_d_environment__time; // ___units_5
            d_dt_chaste_interface__membrane__V = var_chaste_interface__membrane__d_V_d_environment__time; // 'millivolt per millisecond'
        }
        
        rDY[0] = d_dt_chaste_interface__membrane__V;
        rAlphaOrTau[1] = var_fast_sodium_current_m_gate__alpha_m;
        rBetaOrInf[1] = var_fast_sodium_current_m_gate__beta_m;
        rAlphaOrTau[2] = var_fast_sodium_current_h_gate__alpha_h;
        rBetaOrInf[2] = var_fast_sodium_current_h_gate__beta_h;
        rAlphaOrTau[3] = var_fast_sodium_current_j_gate__alpha_j;
        rBetaOrInf[3] = var_fast_sodium_current_j_gate__beta_j;
        rAlphaOrTau[4] = var_slow_inward_current_d_gate__alpha_d;
        rBetaOrInf[4] = var_slow_inward_current_d_gate__beta_d;
        rAlphaOrTau[5] = var_slow_inward_current_f_gate__alpha_f;
        rBetaOrInf[5] = var_slow_inward_current_f_gate__beta_f;
        rAlphaOrTau[6] = var_time_dependent_potassium_current_X_gate__alpha_X;
        rBetaOrInf[6] = var_time_dependent_potassium_current_X_gate__beta_X;
        rDY[7] = d_dt_chaste_interface__intracellular_calcium_concentration__Cai;
    }
    
    void CellLuoRudy1991FromCellMLRushLarsen::ComputeOneStepExceptVoltage(const std::vector<double> &rDY, const std::vector<double> &rAlphaOrTau, const std::vector<double> &rBetaOrInf)
    {
        std::vector<double>& rY = rGetStateVariables();
        {
            const double tau_inv = rAlphaOrTau[1] + rBetaOrInf[1];
            const double y_inf = rAlphaOrTau[1] / tau_inv;
            rY[1] = y_inf + (rY[1] - y_inf)*exp(-mDt*tau_inv);
        }
        {
            const double tau_inv = rAlphaOrTau[2] + rBetaOrInf[2];
            const double y_inf = rAlphaOrTau[2] / tau_inv;
            rY[2] = y_inf + (rY[2] - y_inf)*exp(-mDt*tau_inv);
        }
        {
            const double tau_inv = rAlphaOrTau[3] + rBetaOrInf[3];
            const double y_inf = rAlphaOrTau[3] / tau_inv;
            rY[3] = y_inf + (rY[3] - y_inf)*exp(-mDt*tau_inv);
        }
        {
            const double tau_inv = rAlphaOrTau[4] + rBetaOrInf[4];
            const double y_inf = rAlphaOrTau[4] / tau_inv;
            rY[4] = y_inf + (rY[4] - y_inf)*exp(-mDt*tau_inv);
        }
        {
            const double tau_inv = rAlphaOrTau[5] + rBetaOrInf[5];
            const double y_inf = rAlphaOrTau[5] / tau_inv;
            rY[5] = y_inf + (rY[5] - y_inf)*exp(-mDt*tau_inv);
        }
        {
            const double tau_inv = rAlphaOrTau[6] + rBetaOrInf[6];
            const double y_inf = rAlphaOrTau[6] / tau_inv;
            rY[6] = y_inf + (rY[6] - y_inf)*exp(-mDt*tau_inv);
        }
        rY[7] += mDt * rDY[7];
    }
    
    std::vector<double> CellLuoRudy1991FromCellMLRushLarsen::ComputeDerivedQuantities(double var_chaste_interface__environment__time, const std::vector<double> & rY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -83.853
        double var_chaste_interface__time_dependent_potassium_current_X_gate__X = rY[6];
        // Units: dimensionless; Initial value: 0.16647703
        
        
        // Mathematics
        const double var_membrane__R = 8314.0; // joule_per_kilomole_kelvin
        const double var_membrane__T = 310.0; // kelvin
        const double var_membrane__F = 96484.600000000006; // coulomb_per_mole
        const double var_membrane__FonRT = var_membrane__F / (var_membrane__R * var_membrane__T); // per_millivolt
        const double var_time_dependent_potassium_current__V = var_chaste_interface__membrane__V; // millivolt
        const double var_time_dependent_potassium_current_Xi_gate__V = var_time_dependent_potassium_current__V; // millivolt
        const double var_time_dependent_potassium_current_Xi_gate__Xi = (var_time_dependent_potassium_current_Xi_gate__V > (-100.0)) ? ((2.8370000000000002 * (exp(0.040000000000000001 * (var_time_dependent_potassium_current_Xi_gate__V + 77.0)) - 1.0)) / ((var_time_dependent_potassium_current_Xi_gate__V + 77.0) * exp(0.040000000000000001 * (var_time_dependent_potassium_current_Xi_gate__V + 35.0)))) : 1.0; // dimensionless
        const double var_time_dependent_potassium_current__Xi = var_time_dependent_potassium_current_Xi_gate__Xi; // dimensionless
        const double var_ionic_concentrations__Ko = 5.4000000000000004; // millimolar
        const double var_time_dependent_potassium_current__Ko = var_ionic_concentrations__Ko; // millimolar
        const double var_time_dependent_potassium_current__g_K = mParameters[2] * sqrt(var_time_dependent_potassium_current__Ko / 5.4000000000000004); // milliS_per_cm2
        const double var_time_dependent_potassium_current__X = var_chaste_interface__time_dependent_potassium_current_X_gate__X; // dimensionless
        const double var_time_dependent_potassium_current__PR_NaK = 0.018329999999999999; // dimensionless
        const double var_time_dependent_potassium_current__F = var_membrane__F; // coulomb_per_mole
        const double var_ionic_concentrations__Nao = 140.0; // millimolar
        const double var_time_dependent_potassium_current__Nao = var_ionic_concentrations__Nao; // millimolar
        const double var_ionic_concentrations__Ki = 145.0; // millimolar
        const double var_time_dependent_potassium_current__Ki = var_ionic_concentrations__Ki; // millimolar
        const double var_ionic_concentrations__Nai = 18.0; // millimolar
        const double var_time_dependent_potassium_current__Nai = var_ionic_concentrations__Nai; // millimolar
        const double var_time_dependent_potassium_current__T = var_membrane__T; // kelvin
        const double var_time_dependent_potassium_current__R = var_membrane__R; // joule_per_kilomole_kelvin
        const double var_time_dependent_potassium_current__E_K = ((var_time_dependent_potassium_current__R * var_time_dependent_potassium_current__T) / var_time_dependent_potassium_current__F) * log((var_time_dependent_potassium_current__Ko + (var_time_dependent_potassium_current__PR_NaK * var_time_dependent_potassium_current__Nao)) / (var_time_dependent_potassium_current__Ki + (var_time_dependent_potassium_current__PR_NaK * var_time_dependent_potassium_current__Nai))); // millivolt
        const double var_time_dependent_potassium_current__i_K = var_time_dependent_potassium_current__g_K * var_time_dependent_potassium_current__X * var_time_dependent_potassium_current__Xi * (var_time_dependent_potassium_current__V - var_time_dependent_potassium_current__E_K); // microA_per_cm2
        const double var_membrane__i_K = var_time_dependent_potassium_current__i_K; // microA_per_cm2
        const double var_plateau_potassium_current__g_Kp = 0.0183; // milliS_per_cm2
        const double var_plateau_potassium_current__V = var_chaste_interface__membrane__V; // millivolt
        const double var_plateau_potassium_current__Kp = 1.0 / (1.0 + exp((7.4880000000000004 - var_plateau_potassium_current__V) / 5.9800000000000004)); // dimensionless
        const double var_time_independent_potassium_current__Ki = var_ionic_concentrations__Ki; // millimolar
        const double var_time_independent_potassium_current__R = var_membrane__R; // joule_per_kilomole_kelvin
        const double var_time_independent_potassium_current__F = var_membrane__F; // coulomb_per_mole
        const double var_time_independent_potassium_current__Ko = var_ionic_concentrations__Ko; // millimolar
        const double var_time_independent_potassium_current__T = var_membrane__T; // kelvin
        const double var_time_independent_potassium_current__E_K1 = ((var_time_independent_potassium_current__R * var_time_independent_potassium_current__T) / var_time_independent_potassium_current__F) * log(var_time_independent_potassium_current__Ko / var_time_independent_potassium_current__Ki); // millivolt
        const double var_plateau_potassium_current__E_K1 = var_time_independent_potassium_current__E_K1; // millivolt
        const double var_plateau_potassium_current__E_Kp = var_plateau_potassium_current__E_K1; // millivolt
        const double var_plateau_potassium_current__i_Kp = var_plateau_potassium_current__g_Kp * var_plateau_potassium_current__Kp * (var_plateau_potassium_current__V - var_plateau_potassium_current__E_Kp); // microA_per_cm2
        const double var_membrane__i_Kp = var_plateau_potassium_current__i_Kp; // microA_per_cm2
        const double var_time_independent_potassium_current__V = var_chaste_interface__membrane__V; // millivolt
        const double var_time_independent_potassium_current_K1_gate__V = var_time_independent_potassium_current__V; // millivolt
        const double var_time_independent_potassium_current_K1_gate__E_K1 = var_time_independent_potassium_current__E_K1; // millivolt
        const double var_time_independent_potassium_current_K1_gate__beta_K1 = ((0.49124000000000001 * exp(0.080320000000000003 * ((var_time_independent_potassium_current_K1_gate__V + 5.476) - var_time_independent_potassium_current_K1_gate__E_K1))) + (1.0 * exp(0.061749999999999999 * (var_time_independent_potassium_current_K1_gate__V - (var_time_independent_potassium_current_K1_gate__E_K1 + 594.30999999999995))))) / (1.0 + exp((-0.51429999999999998) * ((var_time_independent_potassium_current_K1_gate__V - var_time_independent_potassium_current_K1_gate__E_K1) + 4.7530000000000001))); // per_millisecond
        const double var_time_independent_potassium_current_K1_gate__alpha_K1 = 1.02 / (1.0 + exp(0.23849999999999999 * ((var_time_independent_potassium_current_K1_gate__V - var_time_independent_potassium_current_K1_gate__E_K1) - 59.215000000000003))); // per_millisecond
        const double var_time_independent_potassium_current_K1_gate__K1_infinity = var_time_independent_potassium_current_K1_gate__alpha_K1 / (var_time_independent_potassium_current_K1_gate__alpha_K1 + var_time_independent_potassium_current_K1_gate__beta_K1); // dimensionless
        const double var_time_independent_potassium_current__K1_infinity = var_time_independent_potassium_current_K1_gate__K1_infinity; // dimensionless
        const double var_time_independent_potassium_current__g_K1 = 0.60470000000000002 * sqrt(var_time_independent_potassium_current__Ko / 5.4000000000000004); // milliS_per_cm2
        const double var_time_independent_potassium_current__i_K1 = var_time_independent_potassium_current__g_K1 * var_time_independent_potassium_current__K1_infinity * (var_time_independent_potassium_current__V - var_time_independent_potassium_current__E_K1); // microA_per_cm2
        const double var_membrane__i_K1 = var_time_independent_potassium_current__i_K1; // microA_per_cm2
        const double var_membrane__potassium_currents = var_membrane__i_K + var_membrane__i_K1 + var_membrane__i_Kp; // microA_per_cm2
        
        std::vector<double> dqs(2);
        dqs[0] = var_membrane__FonRT;
        dqs[1] = var_membrane__potassium_currents;
        return dqs;
    }
    
template<>
void OdeSystemInformation<CellLuoRudy1991FromCellMLRushLarsen>::Initialise(void)
{
    this->mSystemName = "luo_rudy_1991";
    this->mFreeVariableName = "environment_time";
    this->mFreeVariableUnits = "millisecond";
    
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("millivolt");
    this->mInitialConditions.push_back(-83.853);

    this->mVariableNames.push_back("fast_sodium_current_m_gate__m");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00187018);

    this->mVariableNames.push_back("fast_sodium_current_h_gate__h");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9804713);

    this->mVariableNames.push_back("fast_sodium_current_j_gate__j");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.98767124);

    this->mVariableNames.push_back("slow_inward_current_d_gate__d");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00316354);

    this->mVariableNames.push_back("slow_inward_current_f_gate__f");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.99427859);

    this->mVariableNames.push_back("time_dependent_potassium_current_X_gate__X");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.16647703);

    this->mVariableNames.push_back("cytosolic_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.0002);

    this->mParameterNames.push_back("membrane_L_type_calcium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_cm2");
    
    this->mParameterNames.push_back("membrane_fast_sodium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_cm2");
    
    this->mParameterNames.push_back("membrane_rapid_delayed_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_cm2");
    
    this->mDerivedQuantityNames.push_back("FonRT");
    this->mDerivedQuantityUnits.push_back("per_millivolt");
    
    this->mDerivedQuantityNames.push_back("potassium_currents");
    this->mDerivedQuantityUnits.push_back("microA_per_cm2");
    
    this->mAttributes["SuggestedCycleLength"] = 750;
    this->mAttributes["SuggestedForwardEulerTimestep"] = 0.005;
    
    this->mInitialised = true;
}


// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(CellLuoRudy1991FromCellMLRushLarsen)
